/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PatchedChat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedChat{}

// PatchedChat struct for PatchedChat
type PatchedChat struct {
	// The chat ID UUID for an instance of a chat.
	ChatId *int32 `json:"chat_id,omitempty"`
	TenantId *TenantInfo `json:"tenant_id,omitempty"`
	GuestClient *ClientInfo `json:"guest_client,omitempty"`
	ChatOwner *ClientInfo `json:"chat_owner,omitempty"`
	AnonymousUser *AnonymousUser `json:"anonymous_user,omitempty"`
	// Whether client is satisfied or not
	ClientSatisfaction NullableBool `json:"client_satisfaction,omitempty"`
	// Enable or disable whether the virtual assistant should talk to a client
	IvaEnabled *bool `json:"iva_enabled,omitempty"`
	// The timestamp of the chat.
	Timestamp NullableTime `json:"timestamp,omitempty"`
	CreatedAt NullableString `json:"created_at,omitempty"`
}

// NewPatchedChat instantiates a new PatchedChat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedChat() *PatchedChat {
	this := PatchedChat{}
	return &this
}

// NewPatchedChatWithDefaults instantiates a new PatchedChat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedChatWithDefaults() *PatchedChat {
	this := PatchedChat{}
	return &this
}

// GetChatId returns the ChatId field value if set, zero value otherwise.
func (o *PatchedChat) GetChatId() int32 {
	if o == nil || IsNil(o.ChatId) {
		var ret int32
		return ret
	}
	return *o.ChatId
}

// GetChatIdOk returns a tuple with the ChatId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedChat) GetChatIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ChatId) {
		return nil, false
	}
	return o.ChatId, true
}

// HasChatId returns a boolean if a field has been set.
func (o *PatchedChat) HasChatId() bool {
	if o != nil && !IsNil(o.ChatId) {
		return true
	}

	return false
}

// SetChatId gets a reference to the given int32 and assigns it to the ChatId field.
func (o *PatchedChat) SetChatId(v int32) {
	o.ChatId = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *PatchedChat) GetTenantId() TenantInfo {
	if o == nil || IsNil(o.TenantId) {
		var ret TenantInfo
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedChat) GetTenantIdOk() (*TenantInfo, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *PatchedChat) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given TenantInfo and assigns it to the TenantId field.
func (o *PatchedChat) SetTenantId(v TenantInfo) {
	o.TenantId = &v
}

// GetGuestClient returns the GuestClient field value if set, zero value otherwise.
func (o *PatchedChat) GetGuestClient() ClientInfo {
	if o == nil || IsNil(o.GuestClient) {
		var ret ClientInfo
		return ret
	}
	return *o.GuestClient
}

// GetGuestClientOk returns a tuple with the GuestClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedChat) GetGuestClientOk() (*ClientInfo, bool) {
	if o == nil || IsNil(o.GuestClient) {
		return nil, false
	}
	return o.GuestClient, true
}

// HasGuestClient returns a boolean if a field has been set.
func (o *PatchedChat) HasGuestClient() bool {
	if o != nil && !IsNil(o.GuestClient) {
		return true
	}

	return false
}

// SetGuestClient gets a reference to the given ClientInfo and assigns it to the GuestClient field.
func (o *PatchedChat) SetGuestClient(v ClientInfo) {
	o.GuestClient = &v
}

// GetChatOwner returns the ChatOwner field value if set, zero value otherwise.
func (o *PatchedChat) GetChatOwner() ClientInfo {
	if o == nil || IsNil(o.ChatOwner) {
		var ret ClientInfo
		return ret
	}
	return *o.ChatOwner
}

// GetChatOwnerOk returns a tuple with the ChatOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedChat) GetChatOwnerOk() (*ClientInfo, bool) {
	if o == nil || IsNil(o.ChatOwner) {
		return nil, false
	}
	return o.ChatOwner, true
}

// HasChatOwner returns a boolean if a field has been set.
func (o *PatchedChat) HasChatOwner() bool {
	if o != nil && !IsNil(o.ChatOwner) {
		return true
	}

	return false
}

// SetChatOwner gets a reference to the given ClientInfo and assigns it to the ChatOwner field.
func (o *PatchedChat) SetChatOwner(v ClientInfo) {
	o.ChatOwner = &v
}

// GetAnonymousUser returns the AnonymousUser field value if set, zero value otherwise.
func (o *PatchedChat) GetAnonymousUser() AnonymousUser {
	if o == nil || IsNil(o.AnonymousUser) {
		var ret AnonymousUser
		return ret
	}
	return *o.AnonymousUser
}

// GetAnonymousUserOk returns a tuple with the AnonymousUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedChat) GetAnonymousUserOk() (*AnonymousUser, bool) {
	if o == nil || IsNil(o.AnonymousUser) {
		return nil, false
	}
	return o.AnonymousUser, true
}

// HasAnonymousUser returns a boolean if a field has been set.
func (o *PatchedChat) HasAnonymousUser() bool {
	if o != nil && !IsNil(o.AnonymousUser) {
		return true
	}

	return false
}

// SetAnonymousUser gets a reference to the given AnonymousUser and assigns it to the AnonymousUser field.
func (o *PatchedChat) SetAnonymousUser(v AnonymousUser) {
	o.AnonymousUser = &v
}

// GetClientSatisfaction returns the ClientSatisfaction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedChat) GetClientSatisfaction() bool {
	if o == nil || IsNil(o.ClientSatisfaction.Get()) {
		var ret bool
		return ret
	}
	return *o.ClientSatisfaction.Get()
}

// GetClientSatisfactionOk returns a tuple with the ClientSatisfaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedChat) GetClientSatisfactionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClientSatisfaction.Get(), o.ClientSatisfaction.IsSet()
}

// HasClientSatisfaction returns a boolean if a field has been set.
func (o *PatchedChat) HasClientSatisfaction() bool {
	if o != nil && o.ClientSatisfaction.IsSet() {
		return true
	}

	return false
}

// SetClientSatisfaction gets a reference to the given NullableBool and assigns it to the ClientSatisfaction field.
func (o *PatchedChat) SetClientSatisfaction(v bool) {
	o.ClientSatisfaction.Set(&v)
}
// SetClientSatisfactionNil sets the value for ClientSatisfaction to be an explicit nil
func (o *PatchedChat) SetClientSatisfactionNil() {
	o.ClientSatisfaction.Set(nil)
}

// UnsetClientSatisfaction ensures that no value is present for ClientSatisfaction, not even an explicit nil
func (o *PatchedChat) UnsetClientSatisfaction() {
	o.ClientSatisfaction.Unset()
}

// GetIvaEnabled returns the IvaEnabled field value if set, zero value otherwise.
func (o *PatchedChat) GetIvaEnabled() bool {
	if o == nil || IsNil(o.IvaEnabled) {
		var ret bool
		return ret
	}
	return *o.IvaEnabled
}

// GetIvaEnabledOk returns a tuple with the IvaEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedChat) GetIvaEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IvaEnabled) {
		return nil, false
	}
	return o.IvaEnabled, true
}

// HasIvaEnabled returns a boolean if a field has been set.
func (o *PatchedChat) HasIvaEnabled() bool {
	if o != nil && !IsNil(o.IvaEnabled) {
		return true
	}

	return false
}

// SetIvaEnabled gets a reference to the given bool and assigns it to the IvaEnabled field.
func (o *PatchedChat) SetIvaEnabled(v bool) {
	o.IvaEnabled = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedChat) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedChat) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *PatchedChat) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *PatchedChat) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *PatchedChat) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *PatchedChat) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedChat) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedChat) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PatchedChat) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given NullableString and assigns it to the CreatedAt field.
func (o *PatchedChat) SetCreatedAt(v string) {
	o.CreatedAt.Set(&v)
}
// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *PatchedChat) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *PatchedChat) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

func (o PatchedChat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedChat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChatId) {
		toSerialize["chat_id"] = o.ChatId
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenant_id"] = o.TenantId
	}
	if !IsNil(o.GuestClient) {
		toSerialize["guest_client"] = o.GuestClient
	}
	if !IsNil(o.ChatOwner) {
		toSerialize["chat_owner"] = o.ChatOwner
	}
	if !IsNil(o.AnonymousUser) {
		toSerialize["anonymous_user"] = o.AnonymousUser
	}
	if o.ClientSatisfaction.IsSet() {
		toSerialize["client_satisfaction"] = o.ClientSatisfaction.Get()
	}
	if !IsNil(o.IvaEnabled) {
		toSerialize["iva_enabled"] = o.IvaEnabled
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.CreatedAt.IsSet() {
		toSerialize["created_at"] = o.CreatedAt.Get()
	}
	return toSerialize, nil
}

type NullablePatchedChat struct {
	value *PatchedChat
	isSet bool
}

func (v NullablePatchedChat) Get() *PatchedChat {
	return v.value
}

func (v *NullablePatchedChat) Set(val *PatchedChat) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedChat) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedChat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedChat(val *PatchedChat) *NullablePatchedChat {
	return &NullablePatchedChat{value: val, isSet: true}
}

func (v NullablePatchedChat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedChat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


