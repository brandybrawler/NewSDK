/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// InteractionTypeEnum * `NOTE` - Note * `DECISION` - Decision * `ESCALATION` - Escalation
type InteractionTypeEnum string

// List of InteractionTypeEnum
const (
	NOTE InteractionTypeEnum = "NOTE"
	DECISION InteractionTypeEnum = "DECISION"
	ESCALATION InteractionTypeEnum = "ESCALATION"
)

// All allowed values of InteractionTypeEnum enum
var AllowedInteractionTypeEnumEnumValues = []InteractionTypeEnum{
	"NOTE",
	"DECISION",
	"ESCALATION",
}

func (v *InteractionTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InteractionTypeEnum(value)
	for _, existing := range AllowedInteractionTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InteractionTypeEnum", value)
}

// NewInteractionTypeEnumFromValue returns a pointer to a valid InteractionTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInteractionTypeEnumFromValue(v string) (*InteractionTypeEnum, error) {
	ev := InteractionTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InteractionTypeEnum: valid values are %v", v, AllowedInteractionTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InteractionTypeEnum) IsValid() bool {
	for _, existing := range AllowedInteractionTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InteractionTypeEnum value
func (v InteractionTypeEnum) Ptr() *InteractionTypeEnum {
	return &v
}

type NullableInteractionTypeEnum struct {
	value *InteractionTypeEnum
	isSet bool
}

func (v NullableInteractionTypeEnum) Get() *InteractionTypeEnum {
	return v.value
}

func (v *NullableInteractionTypeEnum) Set(val *InteractionTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableInteractionTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableInteractionTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInteractionTypeEnum(val *InteractionTypeEnum) *NullableInteractionTypeEnum {
	return &NullableInteractionTypeEnum{value: val, isSet: true}
}

func (v NullableInteractionTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInteractionTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

