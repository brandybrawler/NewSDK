/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FavoriteCommunity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FavoriteCommunity{}

// FavoriteCommunity struct for FavoriteCommunity
type FavoriteCommunity struct {
	// The tenant community ID UUID.
	CommunityId int32 `json:"community_id"`
	TenantId CommunityTenant `json:"tenant_id"`
	// Description of the community.
	Description NullableString `json:"description,omitempty"`
}

type _FavoriteCommunity FavoriteCommunity

// NewFavoriteCommunity instantiates a new FavoriteCommunity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFavoriteCommunity(communityId int32, tenantId CommunityTenant) *FavoriteCommunity {
	this := FavoriteCommunity{}
	this.CommunityId = communityId
	this.TenantId = tenantId
	return &this
}

// NewFavoriteCommunityWithDefaults instantiates a new FavoriteCommunity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFavoriteCommunityWithDefaults() *FavoriteCommunity {
	this := FavoriteCommunity{}
	return &this
}

// GetCommunityId returns the CommunityId field value
func (o *FavoriteCommunity) GetCommunityId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CommunityId
}

// GetCommunityIdOk returns a tuple with the CommunityId field value
// and a boolean to check if the value has been set.
func (o *FavoriteCommunity) GetCommunityIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommunityId, true
}

// SetCommunityId sets field value
func (o *FavoriteCommunity) SetCommunityId(v int32) {
	o.CommunityId = v
}

// GetTenantId returns the TenantId field value
func (o *FavoriteCommunity) GetTenantId() CommunityTenant {
	if o == nil {
		var ret CommunityTenant
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *FavoriteCommunity) GetTenantIdOk() (*CommunityTenant, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *FavoriteCommunity) SetTenantId(v CommunityTenant) {
	o.TenantId = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FavoriteCommunity) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FavoriteCommunity) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *FavoriteCommunity) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *FavoriteCommunity) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *FavoriteCommunity) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *FavoriteCommunity) UnsetDescription() {
	o.Description.Unset()
}

func (o FavoriteCommunity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FavoriteCommunity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["community_id"] = o.CommunityId
	toSerialize["tenant_id"] = o.TenantId
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	return toSerialize, nil
}

func (o *FavoriteCommunity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"community_id",
		"tenant_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFavoriteCommunity := _FavoriteCommunity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFavoriteCommunity)

	if err != nil {
		return err
	}

	*o = FavoriteCommunity(varFavoriteCommunity)

	return err
}

type NullableFavoriteCommunity struct {
	value *FavoriteCommunity
	isSet bool
}

func (v NullableFavoriteCommunity) Get() *FavoriteCommunity {
	return v.value
}

func (v *NullableFavoriteCommunity) Set(val *FavoriteCommunity) {
	v.value = val
	v.isSet = true
}

func (v NullableFavoriteCommunity) IsSet() bool {
	return v.isSet
}

func (v *NullableFavoriteCommunity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFavoriteCommunity(val *FavoriteCommunity) *NullableFavoriteCommunity {
	return &NullableFavoriteCommunity{value: val, isSet: true}
}

func (v NullableFavoriteCommunity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFavoriteCommunity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


