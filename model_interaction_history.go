/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InteractionHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InteractionHistory{}

// InteractionHistory struct for InteractionHistory
type InteractionHistory struct {
	// The call id.
	InteractionHistoryId int32 `json:"interaction_history_id"`
	Call Call `json:"call"`
	// Type of interaction.  * `NOTE` - Note * `DECISION` - Decision * `ESCALATION` - Escalation
	InteractionType InteractionTypeEnum `json:"interaction_type"`
	// Details of the interaction.
	Details string `json:"details"`
}

type _InteractionHistory InteractionHistory

// NewInteractionHistory instantiates a new InteractionHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInteractionHistory(interactionHistoryId int32, call Call, interactionType InteractionTypeEnum, details string) *InteractionHistory {
	this := InteractionHistory{}
	this.InteractionHistoryId = interactionHistoryId
	this.Call = call
	this.InteractionType = interactionType
	this.Details = details
	return &this
}

// NewInteractionHistoryWithDefaults instantiates a new InteractionHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInteractionHistoryWithDefaults() *InteractionHistory {
	this := InteractionHistory{}
	return &this
}

// GetInteractionHistoryId returns the InteractionHistoryId field value
func (o *InteractionHistory) GetInteractionHistoryId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InteractionHistoryId
}

// GetInteractionHistoryIdOk returns a tuple with the InteractionHistoryId field value
// and a boolean to check if the value has been set.
func (o *InteractionHistory) GetInteractionHistoryIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InteractionHistoryId, true
}

// SetInteractionHistoryId sets field value
func (o *InteractionHistory) SetInteractionHistoryId(v int32) {
	o.InteractionHistoryId = v
}

// GetCall returns the Call field value
func (o *InteractionHistory) GetCall() Call {
	if o == nil {
		var ret Call
		return ret
	}

	return o.Call
}

// GetCallOk returns a tuple with the Call field value
// and a boolean to check if the value has been set.
func (o *InteractionHistory) GetCallOk() (*Call, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Call, true
}

// SetCall sets field value
func (o *InteractionHistory) SetCall(v Call) {
	o.Call = v
}

// GetInteractionType returns the InteractionType field value
func (o *InteractionHistory) GetInteractionType() InteractionTypeEnum {
	if o == nil {
		var ret InteractionTypeEnum
		return ret
	}

	return o.InteractionType
}

// GetInteractionTypeOk returns a tuple with the InteractionType field value
// and a boolean to check if the value has been set.
func (o *InteractionHistory) GetInteractionTypeOk() (*InteractionTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InteractionType, true
}

// SetInteractionType sets field value
func (o *InteractionHistory) SetInteractionType(v InteractionTypeEnum) {
	o.InteractionType = v
}

// GetDetails returns the Details field value
func (o *InteractionHistory) GetDetails() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value
// and a boolean to check if the value has been set.
func (o *InteractionHistory) GetDetailsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Details, true
}

// SetDetails sets field value
func (o *InteractionHistory) SetDetails(v string) {
	o.Details = v
}

func (o InteractionHistory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InteractionHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["interaction_history_id"] = o.InteractionHistoryId
	toSerialize["call"] = o.Call
	toSerialize["interaction_type"] = o.InteractionType
	toSerialize["details"] = o.Details
	return toSerialize, nil
}

func (o *InteractionHistory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"interaction_history_id",
		"call",
		"interaction_type",
		"details",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInteractionHistory := _InteractionHistory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInteractionHistory)

	if err != nil {
		return err
	}

	*o = InteractionHistory(varInteractionHistory)

	return err
}

type NullableInteractionHistory struct {
	value *InteractionHistory
	isSet bool
}

func (v NullableInteractionHistory) Get() *InteractionHistory {
	return v.value
}

func (v *NullableInteractionHistory) Set(val *InteractionHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableInteractionHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableInteractionHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInteractionHistory(val *InteractionHistory) *NullableInteractionHistory {
	return &NullableInteractionHistory{value: val, isSet: true}
}

func (v NullableInteractionHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInteractionHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


