/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AssistantTrainingProgressaseStatusEnum * `In Progress` - In Progress * `Paused` - Paused * `Completed` - Completed
type AssistantTrainingProgressaseStatusEnum string

// List of AssistantTrainingProgressaseStatusEnum
const (
	IN_PROGRESS AssistantTrainingProgressaseStatusEnum = "In Progress"
	PAUSED AssistantTrainingProgressaseStatusEnum = "Paused"
	COMPLETED AssistantTrainingProgressaseStatusEnum = "Completed"
)

// All allowed values of AssistantTrainingProgressaseStatusEnum enum
var AllowedAssistantTrainingProgressaseStatusEnumEnumValues = []AssistantTrainingProgressaseStatusEnum{
	"In Progress",
	"Paused",
	"Completed",
}

func (v *AssistantTrainingProgressaseStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AssistantTrainingProgressaseStatusEnum(value)
	for _, existing := range AllowedAssistantTrainingProgressaseStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AssistantTrainingProgressaseStatusEnum", value)
}

// NewAssistantTrainingProgressaseStatusEnumFromValue returns a pointer to a valid AssistantTrainingProgressaseStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssistantTrainingProgressaseStatusEnumFromValue(v string) (*AssistantTrainingProgressaseStatusEnum, error) {
	ev := AssistantTrainingProgressaseStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AssistantTrainingProgressaseStatusEnum: valid values are %v", v, AllowedAssistantTrainingProgressaseStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssistantTrainingProgressaseStatusEnum) IsValid() bool {
	for _, existing := range AllowedAssistantTrainingProgressaseStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AssistantTrainingProgressaseStatusEnum value
func (v AssistantTrainingProgressaseStatusEnum) Ptr() *AssistantTrainingProgressaseStatusEnum {
	return &v
}

type NullableAssistantTrainingProgressaseStatusEnum struct {
	value *AssistantTrainingProgressaseStatusEnum
	isSet bool
}

func (v NullableAssistantTrainingProgressaseStatusEnum) Get() *AssistantTrainingProgressaseStatusEnum {
	return v.value
}

func (v *NullableAssistantTrainingProgressaseStatusEnum) Set(val *AssistantTrainingProgressaseStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistantTrainingProgressaseStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistantTrainingProgressaseStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistantTrainingProgressaseStatusEnum(val *AssistantTrainingProgressaseStatusEnum) *NullableAssistantTrainingProgressaseStatusEnum {
	return &NullableAssistantTrainingProgressaseStatusEnum{value: val, isSet: true}
}

func (v NullableAssistantTrainingProgressaseStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistantTrainingProgressaseStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

