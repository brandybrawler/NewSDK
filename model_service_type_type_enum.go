/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ServiceTypeTypeEnum * `problem_resolution` - Problem Resolution * `tech_support` - Technical Support * `billing_payment` - Billing and Payment Support * `cancellation_closure` - Cancellation and Closure
type ServiceTypeTypeEnum string

// List of ServiceTypeTypeEnum
const (
	PROBLEM_RESOLUTION ServiceTypeTypeEnum = "problem_resolution"
	TECH_SUPPORT ServiceTypeTypeEnum = "tech_support"
	BILLING_PAYMENT ServiceTypeTypeEnum = "billing_payment"
	CANCELLATION_CLOSURE ServiceTypeTypeEnum = "cancellation_closure"
)

// All allowed values of ServiceTypeTypeEnum enum
var AllowedServiceTypeTypeEnumEnumValues = []ServiceTypeTypeEnum{
	"problem_resolution",
	"tech_support",
	"billing_payment",
	"cancellation_closure",
}

func (v *ServiceTypeTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceTypeTypeEnum(value)
	for _, existing := range AllowedServiceTypeTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceTypeTypeEnum", value)
}

// NewServiceTypeTypeEnumFromValue returns a pointer to a valid ServiceTypeTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceTypeTypeEnumFromValue(v string) (*ServiceTypeTypeEnum, error) {
	ev := ServiceTypeTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceTypeTypeEnum: valid values are %v", v, AllowedServiceTypeTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceTypeTypeEnum) IsValid() bool {
	for _, existing := range AllowedServiceTypeTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceTypeTypeEnum value
func (v ServiceTypeTypeEnum) Ptr() *ServiceTypeTypeEnum {
	return &v
}

type NullableServiceTypeTypeEnum struct {
	value *ServiceTypeTypeEnum
	isSet bool
}

func (v NullableServiceTypeTypeEnum) Get() *ServiceTypeTypeEnum {
	return v.value
}

func (v *NullableServiceTypeTypeEnum) Set(val *ServiceTypeTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceTypeTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceTypeTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceTypeTypeEnum(val *ServiceTypeTypeEnum) *NullableServiceTypeTypeEnum {
	return &NullableServiceTypeTypeEnum{value: val, isSet: true}
}

func (v NullableServiceTypeTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceTypeTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

