/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MessageSenderEnum * `client` - client * `tenant` - tenant * `tenant_iva` - tenant_iva * `anonymous_client` - anonymous_client
type MessageSenderEnum string

// List of MessageSenderEnum
const (
	CLIENT MessageSenderEnum = "client"
	TENANT MessageSenderEnum = "tenant"
	TENANT_IVA MessageSenderEnum = "tenant_iva"
	ANONYMOUS_CLIENT MessageSenderEnum = "anonymous_client"
)

// All allowed values of MessageSenderEnum enum
var AllowedMessageSenderEnumEnumValues = []MessageSenderEnum{
	"client",
	"tenant",
	"tenant_iva",
	"anonymous_client",
}

func (v *MessageSenderEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MessageSenderEnum(value)
	for _, existing := range AllowedMessageSenderEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MessageSenderEnum", value)
}

// NewMessageSenderEnumFromValue returns a pointer to a valid MessageSenderEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMessageSenderEnumFromValue(v string) (*MessageSenderEnum, error) {
	ev := MessageSenderEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MessageSenderEnum: valid values are %v", v, AllowedMessageSenderEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MessageSenderEnum) IsValid() bool {
	for _, existing := range AllowedMessageSenderEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MessageSenderEnum value
func (v MessageSenderEnum) Ptr() *MessageSenderEnum {
	return &v
}

type NullableMessageSenderEnum struct {
	value *MessageSenderEnum
	isSet bool
}

func (v NullableMessageSenderEnum) Get() *MessageSenderEnum {
	return v.value
}

func (v *NullableMessageSenderEnum) Set(val *MessageSenderEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageSenderEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageSenderEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageSenderEnum(val *MessageSenderEnum) *NullableMessageSenderEnum {
	return &NullableMessageSenderEnum{value: val, isSet: true}
}

func (v NullableMessageSenderEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageSenderEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

