/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ServiceAvailabilityEnum * `All_Clients` - All Clients * `Authenticated_Clients` - Authenticated Clients * `Unauthenticated_Clients` - Unauthenticated Clients
type ServiceAvailabilityEnum string

// List of ServiceAvailabilityEnum
const (
	ALL_CLIENTS ServiceAvailabilityEnum = "All_Clients"
	AUTHENTICATED_CLIENTS ServiceAvailabilityEnum = "Authenticated_Clients"
	UNAUTHENTICATED_CLIENTS ServiceAvailabilityEnum = "Unauthenticated_Clients"
)

// All allowed values of ServiceAvailabilityEnum enum
var AllowedServiceAvailabilityEnumEnumValues = []ServiceAvailabilityEnum{
	"All_Clients",
	"Authenticated_Clients",
	"Unauthenticated_Clients",
}

func (v *ServiceAvailabilityEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceAvailabilityEnum(value)
	for _, existing := range AllowedServiceAvailabilityEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceAvailabilityEnum", value)
}

// NewServiceAvailabilityEnumFromValue returns a pointer to a valid ServiceAvailabilityEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceAvailabilityEnumFromValue(v string) (*ServiceAvailabilityEnum, error) {
	ev := ServiceAvailabilityEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceAvailabilityEnum: valid values are %v", v, AllowedServiceAvailabilityEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceAvailabilityEnum) IsValid() bool {
	for _, existing := range AllowedServiceAvailabilityEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceAvailabilityEnum value
func (v ServiceAvailabilityEnum) Ptr() *ServiceAvailabilityEnum {
	return &v
}

type NullableServiceAvailabilityEnum struct {
	value *ServiceAvailabilityEnum
	isSet bool
}

func (v NullableServiceAvailabilityEnum) Get() *ServiceAvailabilityEnum {
	return v.value
}

func (v *NullableServiceAvailabilityEnum) Set(val *ServiceAvailabilityEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceAvailabilityEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceAvailabilityEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceAvailabilityEnum(val *ServiceAvailabilityEnum) *NullableServiceAvailabilityEnum {
	return &NullableServiceAvailabilityEnum{value: val, isSet: true}
}

func (v NullableServiceAvailabilityEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceAvailabilityEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

