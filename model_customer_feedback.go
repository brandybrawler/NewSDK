/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomerFeedback type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerFeedback{}

// CustomerFeedback struct for CustomerFeedback
type CustomerFeedback struct {
	CustomerFeedbackId int32 `json:"customer_feedback_id"`
	Call Call `json:"call"`
	// Rating on a scale of 1 to 5.
	Rating int32 `json:"rating"`
	// Detailed text feedback from the customer.
	FeedbackText NullableString `json:"feedback_text,omitempty"`
	// Category of the feedback.  * `SERVICE` - Service * `TECHNICAL` - Technical Issue * `GENERAL` - General Feedback
	FeedbackCategory FeedbackCategoryEnum `json:"feedback_category"`
}

type _CustomerFeedback CustomerFeedback

// NewCustomerFeedback instantiates a new CustomerFeedback object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerFeedback(customerFeedbackId int32, call Call, rating int32, feedbackCategory FeedbackCategoryEnum) *CustomerFeedback {
	this := CustomerFeedback{}
	this.CustomerFeedbackId = customerFeedbackId
	this.Call = call
	this.Rating = rating
	this.FeedbackCategory = feedbackCategory
	return &this
}

// NewCustomerFeedbackWithDefaults instantiates a new CustomerFeedback object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerFeedbackWithDefaults() *CustomerFeedback {
	this := CustomerFeedback{}
	return &this
}

// GetCustomerFeedbackId returns the CustomerFeedbackId field value
func (o *CustomerFeedback) GetCustomerFeedbackId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CustomerFeedbackId
}

// GetCustomerFeedbackIdOk returns a tuple with the CustomerFeedbackId field value
// and a boolean to check if the value has been set.
func (o *CustomerFeedback) GetCustomerFeedbackIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerFeedbackId, true
}

// SetCustomerFeedbackId sets field value
func (o *CustomerFeedback) SetCustomerFeedbackId(v int32) {
	o.CustomerFeedbackId = v
}

// GetCall returns the Call field value
func (o *CustomerFeedback) GetCall() Call {
	if o == nil {
		var ret Call
		return ret
	}

	return o.Call
}

// GetCallOk returns a tuple with the Call field value
// and a boolean to check if the value has been set.
func (o *CustomerFeedback) GetCallOk() (*Call, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Call, true
}

// SetCall sets field value
func (o *CustomerFeedback) SetCall(v Call) {
	o.Call = v
}

// GetRating returns the Rating field value
func (o *CustomerFeedback) GetRating() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Rating
}

// GetRatingOk returns a tuple with the Rating field value
// and a boolean to check if the value has been set.
func (o *CustomerFeedback) GetRatingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rating, true
}

// SetRating sets field value
func (o *CustomerFeedback) SetRating(v int32) {
	o.Rating = v
}

// GetFeedbackText returns the FeedbackText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomerFeedback) GetFeedbackText() string {
	if o == nil || IsNil(o.FeedbackText.Get()) {
		var ret string
		return ret
	}
	return *o.FeedbackText.Get()
}

// GetFeedbackTextOk returns a tuple with the FeedbackText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomerFeedback) GetFeedbackTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FeedbackText.Get(), o.FeedbackText.IsSet()
}

// HasFeedbackText returns a boolean if a field has been set.
func (o *CustomerFeedback) HasFeedbackText() bool {
	if o != nil && o.FeedbackText.IsSet() {
		return true
	}

	return false
}

// SetFeedbackText gets a reference to the given NullableString and assigns it to the FeedbackText field.
func (o *CustomerFeedback) SetFeedbackText(v string) {
	o.FeedbackText.Set(&v)
}
// SetFeedbackTextNil sets the value for FeedbackText to be an explicit nil
func (o *CustomerFeedback) SetFeedbackTextNil() {
	o.FeedbackText.Set(nil)
}

// UnsetFeedbackText ensures that no value is present for FeedbackText, not even an explicit nil
func (o *CustomerFeedback) UnsetFeedbackText() {
	o.FeedbackText.Unset()
}

// GetFeedbackCategory returns the FeedbackCategory field value
func (o *CustomerFeedback) GetFeedbackCategory() FeedbackCategoryEnum {
	if o == nil {
		var ret FeedbackCategoryEnum
		return ret
	}

	return o.FeedbackCategory
}

// GetFeedbackCategoryOk returns a tuple with the FeedbackCategory field value
// and a boolean to check if the value has been set.
func (o *CustomerFeedback) GetFeedbackCategoryOk() (*FeedbackCategoryEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeedbackCategory, true
}

// SetFeedbackCategory sets field value
func (o *CustomerFeedback) SetFeedbackCategory(v FeedbackCategoryEnum) {
	o.FeedbackCategory = v
}

func (o CustomerFeedback) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerFeedback) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["customer_feedback_id"] = o.CustomerFeedbackId
	toSerialize["call"] = o.Call
	toSerialize["rating"] = o.Rating
	if o.FeedbackText.IsSet() {
		toSerialize["feedback_text"] = o.FeedbackText.Get()
	}
	toSerialize["feedback_category"] = o.FeedbackCategory
	return toSerialize, nil
}

func (o *CustomerFeedback) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"customer_feedback_id",
		"call",
		"rating",
		"feedback_category",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomerFeedback := _CustomerFeedback{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomerFeedback)

	if err != nil {
		return err
	}

	*o = CustomerFeedback(varCustomerFeedback)

	return err
}

type NullableCustomerFeedback struct {
	value *CustomerFeedback
	isSet bool
}

func (v NullableCustomerFeedback) Get() *CustomerFeedback {
	return v.value
}

func (v *NullableCustomerFeedback) Set(val *CustomerFeedback) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerFeedback) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerFeedback) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerFeedback(val *CustomerFeedback) *NullableCustomerFeedback {
	return &NullableCustomerFeedback{value: val, isSet: true}
}

func (v NullableCustomerFeedback) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerFeedback) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


