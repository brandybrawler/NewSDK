/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PatchedSetNewPassword type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedSetNewPassword{}

// PatchedSetNewPassword struct for PatchedSetNewPassword
type PatchedSetNewPassword struct {
	Password *string `json:"password,omitempty"`
	Token *string `json:"token,omitempty"`
	Uidb64 *string `json:"uidb64,omitempty"`
}

// NewPatchedSetNewPassword instantiates a new PatchedSetNewPassword object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedSetNewPassword() *PatchedSetNewPassword {
	this := PatchedSetNewPassword{}
	return &this
}

// NewPatchedSetNewPasswordWithDefaults instantiates a new PatchedSetNewPassword object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedSetNewPasswordWithDefaults() *PatchedSetNewPassword {
	this := PatchedSetNewPassword{}
	return &this
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *PatchedSetNewPassword) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedSetNewPassword) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *PatchedSetNewPassword) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *PatchedSetNewPassword) SetPassword(v string) {
	o.Password = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *PatchedSetNewPassword) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedSetNewPassword) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *PatchedSetNewPassword) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *PatchedSetNewPassword) SetToken(v string) {
	o.Token = &v
}

// GetUidb64 returns the Uidb64 field value if set, zero value otherwise.
func (o *PatchedSetNewPassword) GetUidb64() string {
	if o == nil || IsNil(o.Uidb64) {
		var ret string
		return ret
	}
	return *o.Uidb64
}

// GetUidb64Ok returns a tuple with the Uidb64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedSetNewPassword) GetUidb64Ok() (*string, bool) {
	if o == nil || IsNil(o.Uidb64) {
		return nil, false
	}
	return o.Uidb64, true
}

// HasUidb64 returns a boolean if a field has been set.
func (o *PatchedSetNewPassword) HasUidb64() bool {
	if o != nil && !IsNil(o.Uidb64) {
		return true
	}

	return false
}

// SetUidb64 gets a reference to the given string and assigns it to the Uidb64 field.
func (o *PatchedSetNewPassword) SetUidb64(v string) {
	o.Uidb64 = &v
}

func (o PatchedSetNewPassword) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedSetNewPassword) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.Uidb64) {
		toSerialize["uidb64"] = o.Uidb64
	}
	return toSerialize, nil
}

type NullablePatchedSetNewPassword struct {
	value *PatchedSetNewPassword
	isSet bool
}

func (v NullablePatchedSetNewPassword) Get() *PatchedSetNewPassword {
	return v.value
}

func (v *NullablePatchedSetNewPassword) Set(val *PatchedSetNewPassword) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedSetNewPassword) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedSetNewPassword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedSetNewPassword(val *PatchedSetNewPassword) *NullablePatchedSetNewPassword {
	return &NullablePatchedSetNewPassword{value: val, isSet: true}
}

func (v NullablePatchedSetNewPassword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedSetNewPassword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


