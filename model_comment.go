/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Comment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Comment{}

// Comment struct for Comment
type Comment struct {
	// The chat ID UUID for an instance of a issue.
	CommentId int32 `json:"comment_id"`
	// Display name of the Thread
	Thread int32 `json:"thread"`
	Client ClientLikes `json:"client"`
	// Description of the comment
	CommentDescription NullableString `json:"comment_description,omitempty"`
	Likes []ClientLikes `json:"likes"`
	// Users who liked the comment
	Dislikes []int32 `json:"dislikes,omitempty"`
}

type _Comment Comment

// NewComment instantiates a new Comment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComment(commentId int32, thread int32, client ClientLikes, likes []ClientLikes) *Comment {
	this := Comment{}
	this.CommentId = commentId
	this.Thread = thread
	this.Client = client
	this.Likes = likes
	return &this
}

// NewCommentWithDefaults instantiates a new Comment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentWithDefaults() *Comment {
	this := Comment{}
	return &this
}

// GetCommentId returns the CommentId field value
func (o *Comment) GetCommentId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CommentId
}

// GetCommentIdOk returns a tuple with the CommentId field value
// and a boolean to check if the value has been set.
func (o *Comment) GetCommentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommentId, true
}

// SetCommentId sets field value
func (o *Comment) SetCommentId(v int32) {
	o.CommentId = v
}

// GetThread returns the Thread field value
func (o *Comment) GetThread() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Thread
}

// GetThreadOk returns a tuple with the Thread field value
// and a boolean to check if the value has been set.
func (o *Comment) GetThreadOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Thread, true
}

// SetThread sets field value
func (o *Comment) SetThread(v int32) {
	o.Thread = v
}

// GetClient returns the Client field value
func (o *Comment) GetClient() ClientLikes {
	if o == nil {
		var ret ClientLikes
		return ret
	}

	return o.Client
}

// GetClientOk returns a tuple with the Client field value
// and a boolean to check if the value has been set.
func (o *Comment) GetClientOk() (*ClientLikes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Client, true
}

// SetClient sets field value
func (o *Comment) SetClient(v ClientLikes) {
	o.Client = v
}

// GetCommentDescription returns the CommentDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Comment) GetCommentDescription() string {
	if o == nil || IsNil(o.CommentDescription.Get()) {
		var ret string
		return ret
	}
	return *o.CommentDescription.Get()
}

// GetCommentDescriptionOk returns a tuple with the CommentDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Comment) GetCommentDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommentDescription.Get(), o.CommentDescription.IsSet()
}

// HasCommentDescription returns a boolean if a field has been set.
func (o *Comment) HasCommentDescription() bool {
	if o != nil && o.CommentDescription.IsSet() {
		return true
	}

	return false
}

// SetCommentDescription gets a reference to the given NullableString and assigns it to the CommentDescription field.
func (o *Comment) SetCommentDescription(v string) {
	o.CommentDescription.Set(&v)
}
// SetCommentDescriptionNil sets the value for CommentDescription to be an explicit nil
func (o *Comment) SetCommentDescriptionNil() {
	o.CommentDescription.Set(nil)
}

// UnsetCommentDescription ensures that no value is present for CommentDescription, not even an explicit nil
func (o *Comment) UnsetCommentDescription() {
	o.CommentDescription.Unset()
}

// GetLikes returns the Likes field value
func (o *Comment) GetLikes() []ClientLikes {
	if o == nil {
		var ret []ClientLikes
		return ret
	}

	return o.Likes
}

// GetLikesOk returns a tuple with the Likes field value
// and a boolean to check if the value has been set.
func (o *Comment) GetLikesOk() ([]ClientLikes, bool) {
	if o == nil {
		return nil, false
	}
	return o.Likes, true
}

// SetLikes sets field value
func (o *Comment) SetLikes(v []ClientLikes) {
	o.Likes = v
}

// GetDislikes returns the Dislikes field value if set, zero value otherwise.
func (o *Comment) GetDislikes() []int32 {
	if o == nil || IsNil(o.Dislikes) {
		var ret []int32
		return ret
	}
	return o.Dislikes
}

// GetDislikesOk returns a tuple with the Dislikes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetDislikesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Dislikes) {
		return nil, false
	}
	return o.Dislikes, true
}

// HasDislikes returns a boolean if a field has been set.
func (o *Comment) HasDislikes() bool {
	if o != nil && !IsNil(o.Dislikes) {
		return true
	}

	return false
}

// SetDislikes gets a reference to the given []int32 and assigns it to the Dislikes field.
func (o *Comment) SetDislikes(v []int32) {
	o.Dislikes = v
}

func (o Comment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Comment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["comment_id"] = o.CommentId
	toSerialize["thread"] = o.Thread
	toSerialize["client"] = o.Client
	if o.CommentDescription.IsSet() {
		toSerialize["comment_description"] = o.CommentDescription.Get()
	}
	toSerialize["likes"] = o.Likes
	if !IsNil(o.Dislikes) {
		toSerialize["dislikes"] = o.Dislikes
	}
	return toSerialize, nil
}

func (o *Comment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"comment_id",
		"thread",
		"client",
		"likes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varComment := _Comment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varComment)

	if err != nil {
		return err
	}

	*o = Comment(varComment)

	return err
}

type NullableComment struct {
	value *Comment
	isSet bool
}

func (v NullableComment) Get() *Comment {
	return v.value
}

func (v *NullableComment) Set(val *Comment) {
	v.value = val
	v.isSet = true
}

func (v NullableComment) IsSet() bool {
	return v.isSet
}

func (v *NullableComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComment(val *Comment) *NullableComment {
	return &NullableComment{value: val, isSet: true}
}

func (v NullableComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


