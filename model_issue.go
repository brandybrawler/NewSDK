/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Issue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Issue{}

// Issue struct for Issue
type Issue struct {
	// The issue ID UUID .
	IssueId int32 `json:"issue_id"`
	// Display name of the issue that's created
	Issue string `json:"issue"`
	// Description of the issue
	Description string `json:"description"`
	// Was the issue solved or not
	Solved *bool `json:"solved,omitempty"`
	ClientId map[string]interface{} `json:"client_id"`
	CommunityId map[string]interface{} `json:"community_id"`
	CreatedAt NullableString `json:"created_at"`
	// The timestamp of the chat.
	Timestamp NullableTime `json:"timestamp"`
	Tags []CommunityTag `json:"tags"`
	NumComments int32 `json:"num_comments"`
	NumUniqueUsers int32 `json:"num_unique_users"`
	// Was the issue solved or not
	Visible NullableBool `json:"visible,omitempty"`
}

type _Issue Issue

// NewIssue instantiates a new Issue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssue(issueId int32, issue string, description string, clientId map[string]interface{}, communityId map[string]interface{}, createdAt NullableString, timestamp NullableTime, tags []CommunityTag, numComments int32, numUniqueUsers int32) *Issue {
	this := Issue{}
	this.IssueId = issueId
	this.Issue = issue
	this.Description = description
	this.ClientId = clientId
	this.CommunityId = communityId
	this.CreatedAt = createdAt
	this.Timestamp = timestamp
	this.Tags = tags
	this.NumComments = numComments
	this.NumUniqueUsers = numUniqueUsers
	return &this
}

// NewIssueWithDefaults instantiates a new Issue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueWithDefaults() *Issue {
	this := Issue{}
	return &this
}

// GetIssueId returns the IssueId field value
func (o *Issue) GetIssueId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IssueId
}

// GetIssueIdOk returns a tuple with the IssueId field value
// and a boolean to check if the value has been set.
func (o *Issue) GetIssueIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssueId, true
}

// SetIssueId sets field value
func (o *Issue) SetIssueId(v int32) {
	o.IssueId = v
}

// GetIssue returns the Issue field value
func (o *Issue) GetIssue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Issue
}

// GetIssueOk returns a tuple with the Issue field value
// and a boolean to check if the value has been set.
func (o *Issue) GetIssueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issue, true
}

// SetIssue sets field value
func (o *Issue) SetIssue(v string) {
	o.Issue = v
}

// GetDescription returns the Description field value
func (o *Issue) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Issue) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Issue) SetDescription(v string) {
	o.Description = v
}

// GetSolved returns the Solved field value if set, zero value otherwise.
func (o *Issue) GetSolved() bool {
	if o == nil || IsNil(o.Solved) {
		var ret bool
		return ret
	}
	return *o.Solved
}

// GetSolvedOk returns a tuple with the Solved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetSolvedOk() (*bool, bool) {
	if o == nil || IsNil(o.Solved) {
		return nil, false
	}
	return o.Solved, true
}

// HasSolved returns a boolean if a field has been set.
func (o *Issue) HasSolved() bool {
	if o != nil && !IsNil(o.Solved) {
		return true
	}

	return false
}

// SetSolved gets a reference to the given bool and assigns it to the Solved field.
func (o *Issue) SetSolved(v bool) {
	o.Solved = &v
}

// GetClientId returns the ClientId field value
func (o *Issue) GetClientId() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *Issue) GetClientIdOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.ClientId, true
}

// SetClientId sets field value
func (o *Issue) SetClientId(v map[string]interface{}) {
	o.ClientId = v
}

// GetCommunityId returns the CommunityId field value
func (o *Issue) GetCommunityId() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.CommunityId
}

// GetCommunityIdOk returns a tuple with the CommunityId field value
// and a boolean to check if the value has been set.
func (o *Issue) GetCommunityIdOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.CommunityId, true
}

// SetCommunityId sets field value
func (o *Issue) SetCommunityId(v map[string]interface{}) {
	o.CommunityId = v
}

// GetCreatedAt returns the CreatedAt field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Issue) GetCreatedAt() string {
	if o == nil || o.CreatedAt.Get() == nil {
		var ret string
		return ret
	}

	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Issue) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// SetCreatedAt sets field value
func (o *Issue) SetCreatedAt(v string) {
	o.CreatedAt.Set(&v)
}

// GetTimestamp returns the Timestamp field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Issue) GetTimestamp() time.Time {
	if o == nil || o.Timestamp.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Issue) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// SetTimestamp sets field value
func (o *Issue) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}

// GetTags returns the Tags field value
func (o *Issue) GetTags() []CommunityTag {
	if o == nil {
		var ret []CommunityTag
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *Issue) GetTagsOk() ([]CommunityTag, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *Issue) SetTags(v []CommunityTag) {
	o.Tags = v
}

// GetNumComments returns the NumComments field value
func (o *Issue) GetNumComments() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumComments
}

// GetNumCommentsOk returns a tuple with the NumComments field value
// and a boolean to check if the value has been set.
func (o *Issue) GetNumCommentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumComments, true
}

// SetNumComments sets field value
func (o *Issue) SetNumComments(v int32) {
	o.NumComments = v
}

// GetNumUniqueUsers returns the NumUniqueUsers field value
func (o *Issue) GetNumUniqueUsers() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumUniqueUsers
}

// GetNumUniqueUsersOk returns a tuple with the NumUniqueUsers field value
// and a boolean to check if the value has been set.
func (o *Issue) GetNumUniqueUsersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumUniqueUsers, true
}

// SetNumUniqueUsers sets field value
func (o *Issue) SetNumUniqueUsers(v int32) {
	o.NumUniqueUsers = v
}

// GetVisible returns the Visible field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Issue) GetVisible() bool {
	if o == nil || IsNil(o.Visible.Get()) {
		var ret bool
		return ret
	}
	return *o.Visible.Get()
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Issue) GetVisibleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Visible.Get(), o.Visible.IsSet()
}

// HasVisible returns a boolean if a field has been set.
func (o *Issue) HasVisible() bool {
	if o != nil && o.Visible.IsSet() {
		return true
	}

	return false
}

// SetVisible gets a reference to the given NullableBool and assigns it to the Visible field.
func (o *Issue) SetVisible(v bool) {
	o.Visible.Set(&v)
}
// SetVisibleNil sets the value for Visible to be an explicit nil
func (o *Issue) SetVisibleNil() {
	o.Visible.Set(nil)
}

// UnsetVisible ensures that no value is present for Visible, not even an explicit nil
func (o *Issue) UnsetVisible() {
	o.Visible.Unset()
}

func (o Issue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Issue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["issue_id"] = o.IssueId
	toSerialize["issue"] = o.Issue
	toSerialize["description"] = o.Description
	if !IsNil(o.Solved) {
		toSerialize["solved"] = o.Solved
	}
	toSerialize["client_id"] = o.ClientId
	toSerialize["community_id"] = o.CommunityId
	toSerialize["created_at"] = o.CreatedAt.Get()
	toSerialize["timestamp"] = o.Timestamp.Get()
	toSerialize["tags"] = o.Tags
	toSerialize["num_comments"] = o.NumComments
	toSerialize["num_unique_users"] = o.NumUniqueUsers
	if o.Visible.IsSet() {
		toSerialize["visible"] = o.Visible.Get()
	}
	return toSerialize, nil
}

func (o *Issue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"issue_id",
		"issue",
		"description",
		"client_id",
		"community_id",
		"created_at",
		"timestamp",
		"tags",
		"num_comments",
		"num_unique_users",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIssue := _Issue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIssue)

	if err != nil {
		return err
	}

	*o = Issue(varIssue)

	return err
}

type NullableIssue struct {
	value *Issue
	isSet bool
}

func (v NullableIssue) Get() *Issue {
	return v.value
}

func (v *NullableIssue) Set(val *Issue) {
	v.value = val
	v.isSet = true
}

func (v NullableIssue) IsSet() bool {
	return v.isSet
}

func (v *NullableIssue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssue(val *Issue) *NullableIssue {
	return &NullableIssue{value: val, isSet: true}
}

func (v NullableIssue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


