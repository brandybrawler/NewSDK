/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServiceForms type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceForms{}

// ServiceForms struct for ServiceForms
type ServiceForms struct {
	ServiceFormId int32 `json:"service_form_id"`
	Service Service `json:"service"`
	NameOfForm string `json:"name_of_form"`
	Form interface{} `json:"form"`
}

type _ServiceForms ServiceForms

// NewServiceForms instantiates a new ServiceForms object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceForms(serviceFormId int32, service Service, nameOfForm string, form interface{}) *ServiceForms {
	this := ServiceForms{}
	this.ServiceFormId = serviceFormId
	this.Service = service
	this.NameOfForm = nameOfForm
	this.Form = form
	return &this
}

// NewServiceFormsWithDefaults instantiates a new ServiceForms object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceFormsWithDefaults() *ServiceForms {
	this := ServiceForms{}
	return &this
}

// GetServiceFormId returns the ServiceFormId field value
func (o *ServiceForms) GetServiceFormId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ServiceFormId
}

// GetServiceFormIdOk returns a tuple with the ServiceFormId field value
// and a boolean to check if the value has been set.
func (o *ServiceForms) GetServiceFormIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceFormId, true
}

// SetServiceFormId sets field value
func (o *ServiceForms) SetServiceFormId(v int32) {
	o.ServiceFormId = v
}

// GetService returns the Service field value
func (o *ServiceForms) GetService() Service {
	if o == nil {
		var ret Service
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *ServiceForms) GetServiceOk() (*Service, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *ServiceForms) SetService(v Service) {
	o.Service = v
}

// GetNameOfForm returns the NameOfForm field value
func (o *ServiceForms) GetNameOfForm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NameOfForm
}

// GetNameOfFormOk returns a tuple with the NameOfForm field value
// and a boolean to check if the value has been set.
func (o *ServiceForms) GetNameOfFormOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NameOfForm, true
}

// SetNameOfForm sets field value
func (o *ServiceForms) SetNameOfForm(v string) {
	o.NameOfForm = v
}

// GetForm returns the Form field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ServiceForms) GetForm() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Form
}

// GetFormOk returns a tuple with the Form field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceForms) GetFormOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Form) {
		return nil, false
	}
	return &o.Form, true
}

// SetForm sets field value
func (o *ServiceForms) SetForm(v interface{}) {
	o.Form = v
}

func (o ServiceForms) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceForms) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["service_form_id"] = o.ServiceFormId
	toSerialize["service"] = o.Service
	toSerialize["name_of_form"] = o.NameOfForm
	if o.Form != nil {
		toSerialize["form"] = o.Form
	}
	return toSerialize, nil
}

func (o *ServiceForms) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"service_form_id",
		"service",
		"name_of_form",
		"form",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceForms := _ServiceForms{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServiceForms)

	if err != nil {
		return err
	}

	*o = ServiceForms(varServiceForms)

	return err
}

type NullableServiceForms struct {
	value *ServiceForms
	isSet bool
}

func (v NullableServiceForms) Get() *ServiceForms {
	return v.value
}

func (v *NullableServiceForms) Set(val *ServiceForms) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceForms) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceForms) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceForms(val *ServiceForms) *NullableServiceForms {
	return &NullableServiceForms{value: val, isSet: true}
}

func (v NullableServiceForms) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceForms) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


