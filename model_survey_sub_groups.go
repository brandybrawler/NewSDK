/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SurveySubGroups type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SurveySubGroups{}

// SurveySubGroups struct for SurveySubGroups
type SurveySubGroups struct {
	// The survey report id
	SurveySubgroupsId int32 `json:"survey_subgroups_id"`
	SurveyId *string `json:"survey_id,omitempty"`
	// The survey subgroup name
	SubgroupName string `json:"subgroup_name"`
	// The survey subgroup description
	SubgroupDescription string `json:"subgroup_description"`
	SubgroupClients []TargetAudience `json:"subgroup_clients"`
}

type _SurveySubGroups SurveySubGroups

// NewSurveySubGroups instantiates a new SurveySubGroups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSurveySubGroups(surveySubgroupsId int32, subgroupName string, subgroupDescription string, subgroupClients []TargetAudience) *SurveySubGroups {
	this := SurveySubGroups{}
	this.SurveySubgroupsId = surveySubgroupsId
	this.SubgroupName = subgroupName
	this.SubgroupDescription = subgroupDescription
	this.SubgroupClients = subgroupClients
	return &this
}

// NewSurveySubGroupsWithDefaults instantiates a new SurveySubGroups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSurveySubGroupsWithDefaults() *SurveySubGroups {
	this := SurveySubGroups{}
	return &this
}

// GetSurveySubgroupsId returns the SurveySubgroupsId field value
func (o *SurveySubGroups) GetSurveySubgroupsId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SurveySubgroupsId
}

// GetSurveySubgroupsIdOk returns a tuple with the SurveySubgroupsId field value
// and a boolean to check if the value has been set.
func (o *SurveySubGroups) GetSurveySubgroupsIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SurveySubgroupsId, true
}

// SetSurveySubgroupsId sets field value
func (o *SurveySubGroups) SetSurveySubgroupsId(v int32) {
	o.SurveySubgroupsId = v
}

// GetSurveyId returns the SurveyId field value if set, zero value otherwise.
func (o *SurveySubGroups) GetSurveyId() string {
	if o == nil || IsNil(o.SurveyId) {
		var ret string
		return ret
	}
	return *o.SurveyId
}

// GetSurveyIdOk returns a tuple with the SurveyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveySubGroups) GetSurveyIdOk() (*string, bool) {
	if o == nil || IsNil(o.SurveyId) {
		return nil, false
	}
	return o.SurveyId, true
}

// HasSurveyId returns a boolean if a field has been set.
func (o *SurveySubGroups) HasSurveyId() bool {
	if o != nil && !IsNil(o.SurveyId) {
		return true
	}

	return false
}

// SetSurveyId gets a reference to the given string and assigns it to the SurveyId field.
func (o *SurveySubGroups) SetSurveyId(v string) {
	o.SurveyId = &v
}

// GetSubgroupName returns the SubgroupName field value
func (o *SurveySubGroups) GetSubgroupName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubgroupName
}

// GetSubgroupNameOk returns a tuple with the SubgroupName field value
// and a boolean to check if the value has been set.
func (o *SurveySubGroups) GetSubgroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubgroupName, true
}

// SetSubgroupName sets field value
func (o *SurveySubGroups) SetSubgroupName(v string) {
	o.SubgroupName = v
}

// GetSubgroupDescription returns the SubgroupDescription field value
func (o *SurveySubGroups) GetSubgroupDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubgroupDescription
}

// GetSubgroupDescriptionOk returns a tuple with the SubgroupDescription field value
// and a boolean to check if the value has been set.
func (o *SurveySubGroups) GetSubgroupDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubgroupDescription, true
}

// SetSubgroupDescription sets field value
func (o *SurveySubGroups) SetSubgroupDescription(v string) {
	o.SubgroupDescription = v
}

// GetSubgroupClients returns the SubgroupClients field value
func (o *SurveySubGroups) GetSubgroupClients() []TargetAudience {
	if o == nil {
		var ret []TargetAudience
		return ret
	}

	return o.SubgroupClients
}

// GetSubgroupClientsOk returns a tuple with the SubgroupClients field value
// and a boolean to check if the value has been set.
func (o *SurveySubGroups) GetSubgroupClientsOk() ([]TargetAudience, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubgroupClients, true
}

// SetSubgroupClients sets field value
func (o *SurveySubGroups) SetSubgroupClients(v []TargetAudience) {
	o.SubgroupClients = v
}

func (o SurveySubGroups) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SurveySubGroups) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["survey_subgroups_id"] = o.SurveySubgroupsId
	if !IsNil(o.SurveyId) {
		toSerialize["survey_id"] = o.SurveyId
	}
	toSerialize["subgroup_name"] = o.SubgroupName
	toSerialize["subgroup_description"] = o.SubgroupDescription
	toSerialize["subgroup_clients"] = o.SubgroupClients
	return toSerialize, nil
}

func (o *SurveySubGroups) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"survey_subgroups_id",
		"subgroup_name",
		"subgroup_description",
		"subgroup_clients",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSurveySubGroups := _SurveySubGroups{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSurveySubGroups)

	if err != nil {
		return err
	}

	*o = SurveySubGroups(varSurveySubGroups)

	return err
}

type NullableSurveySubGroups struct {
	value *SurveySubGroups
	isSet bool
}

func (v NullableSurveySubGroups) Get() *SurveySubGroups {
	return v.value
}

func (v *NullableSurveySubGroups) Set(val *SurveySubGroups) {
	v.value = val
	v.isSet = true
}

func (v NullableSurveySubGroups) IsSet() bool {
	return v.isSet
}

func (v *NullableSurveySubGroups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSurveySubGroups(val *SurveySubGroups) *NullableSurveySubGroups {
	return &NullableSurveySubGroups{value: val, isSet: true}
}

func (v NullableSurveySubGroups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSurveySubGroups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


