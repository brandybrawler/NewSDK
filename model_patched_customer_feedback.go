/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PatchedCustomerFeedback type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedCustomerFeedback{}

// PatchedCustomerFeedback struct for PatchedCustomerFeedback
type PatchedCustomerFeedback struct {
	CustomerFeedbackId *int32 `json:"customer_feedback_id,omitempty"`
	Call *Call `json:"call,omitempty"`
	// Rating on a scale of 1 to 5.
	Rating *int32 `json:"rating,omitempty"`
	// Detailed text feedback from the customer.
	FeedbackText NullableString `json:"feedback_text,omitempty"`
	// Category of the feedback.  * `SERVICE` - Service * `TECHNICAL` - Technical Issue * `GENERAL` - General Feedback
	FeedbackCategory *FeedbackCategoryEnum `json:"feedback_category,omitempty"`
}

// NewPatchedCustomerFeedback instantiates a new PatchedCustomerFeedback object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedCustomerFeedback() *PatchedCustomerFeedback {
	this := PatchedCustomerFeedback{}
	return &this
}

// NewPatchedCustomerFeedbackWithDefaults instantiates a new PatchedCustomerFeedback object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedCustomerFeedbackWithDefaults() *PatchedCustomerFeedback {
	this := PatchedCustomerFeedback{}
	return &this
}

// GetCustomerFeedbackId returns the CustomerFeedbackId field value if set, zero value otherwise.
func (o *PatchedCustomerFeedback) GetCustomerFeedbackId() int32 {
	if o == nil || IsNil(o.CustomerFeedbackId) {
		var ret int32
		return ret
	}
	return *o.CustomerFeedbackId
}

// GetCustomerFeedbackIdOk returns a tuple with the CustomerFeedbackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedCustomerFeedback) GetCustomerFeedbackIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CustomerFeedbackId) {
		return nil, false
	}
	return o.CustomerFeedbackId, true
}

// HasCustomerFeedbackId returns a boolean if a field has been set.
func (o *PatchedCustomerFeedback) HasCustomerFeedbackId() bool {
	if o != nil && !IsNil(o.CustomerFeedbackId) {
		return true
	}

	return false
}

// SetCustomerFeedbackId gets a reference to the given int32 and assigns it to the CustomerFeedbackId field.
func (o *PatchedCustomerFeedback) SetCustomerFeedbackId(v int32) {
	o.CustomerFeedbackId = &v
}

// GetCall returns the Call field value if set, zero value otherwise.
func (o *PatchedCustomerFeedback) GetCall() Call {
	if o == nil || IsNil(o.Call) {
		var ret Call
		return ret
	}
	return *o.Call
}

// GetCallOk returns a tuple with the Call field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedCustomerFeedback) GetCallOk() (*Call, bool) {
	if o == nil || IsNil(o.Call) {
		return nil, false
	}
	return o.Call, true
}

// HasCall returns a boolean if a field has been set.
func (o *PatchedCustomerFeedback) HasCall() bool {
	if o != nil && !IsNil(o.Call) {
		return true
	}

	return false
}

// SetCall gets a reference to the given Call and assigns it to the Call field.
func (o *PatchedCustomerFeedback) SetCall(v Call) {
	o.Call = &v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *PatchedCustomerFeedback) GetRating() int32 {
	if o == nil || IsNil(o.Rating) {
		var ret int32
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedCustomerFeedback) GetRatingOk() (*int32, bool) {
	if o == nil || IsNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *PatchedCustomerFeedback) HasRating() bool {
	if o != nil && !IsNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given int32 and assigns it to the Rating field.
func (o *PatchedCustomerFeedback) SetRating(v int32) {
	o.Rating = &v
}

// GetFeedbackText returns the FeedbackText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedCustomerFeedback) GetFeedbackText() string {
	if o == nil || IsNil(o.FeedbackText.Get()) {
		var ret string
		return ret
	}
	return *o.FeedbackText.Get()
}

// GetFeedbackTextOk returns a tuple with the FeedbackText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedCustomerFeedback) GetFeedbackTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FeedbackText.Get(), o.FeedbackText.IsSet()
}

// HasFeedbackText returns a boolean if a field has been set.
func (o *PatchedCustomerFeedback) HasFeedbackText() bool {
	if o != nil && o.FeedbackText.IsSet() {
		return true
	}

	return false
}

// SetFeedbackText gets a reference to the given NullableString and assigns it to the FeedbackText field.
func (o *PatchedCustomerFeedback) SetFeedbackText(v string) {
	o.FeedbackText.Set(&v)
}
// SetFeedbackTextNil sets the value for FeedbackText to be an explicit nil
func (o *PatchedCustomerFeedback) SetFeedbackTextNil() {
	o.FeedbackText.Set(nil)
}

// UnsetFeedbackText ensures that no value is present for FeedbackText, not even an explicit nil
func (o *PatchedCustomerFeedback) UnsetFeedbackText() {
	o.FeedbackText.Unset()
}

// GetFeedbackCategory returns the FeedbackCategory field value if set, zero value otherwise.
func (o *PatchedCustomerFeedback) GetFeedbackCategory() FeedbackCategoryEnum {
	if o == nil || IsNil(o.FeedbackCategory) {
		var ret FeedbackCategoryEnum
		return ret
	}
	return *o.FeedbackCategory
}

// GetFeedbackCategoryOk returns a tuple with the FeedbackCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedCustomerFeedback) GetFeedbackCategoryOk() (*FeedbackCategoryEnum, bool) {
	if o == nil || IsNil(o.FeedbackCategory) {
		return nil, false
	}
	return o.FeedbackCategory, true
}

// HasFeedbackCategory returns a boolean if a field has been set.
func (o *PatchedCustomerFeedback) HasFeedbackCategory() bool {
	if o != nil && !IsNil(o.FeedbackCategory) {
		return true
	}

	return false
}

// SetFeedbackCategory gets a reference to the given FeedbackCategoryEnum and assigns it to the FeedbackCategory field.
func (o *PatchedCustomerFeedback) SetFeedbackCategory(v FeedbackCategoryEnum) {
	o.FeedbackCategory = &v
}

func (o PatchedCustomerFeedback) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedCustomerFeedback) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomerFeedbackId) {
		toSerialize["customer_feedback_id"] = o.CustomerFeedbackId
	}
	if !IsNil(o.Call) {
		toSerialize["call"] = o.Call
	}
	if !IsNil(o.Rating) {
		toSerialize["rating"] = o.Rating
	}
	if o.FeedbackText.IsSet() {
		toSerialize["feedback_text"] = o.FeedbackText.Get()
	}
	if !IsNil(o.FeedbackCategory) {
		toSerialize["feedback_category"] = o.FeedbackCategory
	}
	return toSerialize, nil
}

type NullablePatchedCustomerFeedback struct {
	value *PatchedCustomerFeedback
	isSet bool
}

func (v NullablePatchedCustomerFeedback) Get() *PatchedCustomerFeedback {
	return v.value
}

func (v *NullablePatchedCustomerFeedback) Set(val *PatchedCustomerFeedback) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedCustomerFeedback) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedCustomerFeedback) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedCustomerFeedback(val *PatchedCustomerFeedback) *NullablePatchedCustomerFeedback {
	return &NullablePatchedCustomerFeedback{value: val, isSet: true}
}

func (v NullablePatchedCustomerFeedback) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedCustomerFeedback) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


