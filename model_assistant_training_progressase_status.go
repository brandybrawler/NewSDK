/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AssistantTrainingProgressaseStatus - struct for AssistantTrainingProgressaseStatus
type AssistantTrainingProgressaseStatus struct {
	AssistantTrainingProgressaseStatusEnum *AssistantTrainingProgressaseStatusEnum
	BlankEnum *BlankEnum
}

// AssistantTrainingProgressaseStatusEnumAsAssistantTrainingProgressaseStatus is a convenience function that returns AssistantTrainingProgressaseStatusEnum wrapped in AssistantTrainingProgressaseStatus
func AssistantTrainingProgressaseStatusEnumAsAssistantTrainingProgressaseStatus(v *AssistantTrainingProgressaseStatusEnum) AssistantTrainingProgressaseStatus {
	return AssistantTrainingProgressaseStatus{
		AssistantTrainingProgressaseStatusEnum: v,
	}
}

// BlankEnumAsAssistantTrainingProgressaseStatus is a convenience function that returns BlankEnum wrapped in AssistantTrainingProgressaseStatus
func BlankEnumAsAssistantTrainingProgressaseStatus(v *BlankEnum) AssistantTrainingProgressaseStatus {
	return AssistantTrainingProgressaseStatus{
		BlankEnum: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AssistantTrainingProgressaseStatus) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into AssistantTrainingProgressaseStatusEnum
	err = newStrictDecoder(data).Decode(&dst.AssistantTrainingProgressaseStatusEnum)
	if err == nil {
		jsonAssistantTrainingProgressaseStatusEnum, _ := json.Marshal(dst.AssistantTrainingProgressaseStatusEnum)
		if string(jsonAssistantTrainingProgressaseStatusEnum) == "{}" { // empty struct
			dst.AssistantTrainingProgressaseStatusEnum = nil
		} else {
			match++
		}
	} else {
		dst.AssistantTrainingProgressaseStatusEnum = nil
	}

	// try to unmarshal data into BlankEnum
	err = newStrictDecoder(data).Decode(&dst.BlankEnum)
	if err == nil {
		jsonBlankEnum, _ := json.Marshal(dst.BlankEnum)
		if string(jsonBlankEnum) == "{}" { // empty struct
			dst.BlankEnum = nil
		} else {
			match++
		}
	} else {
		dst.BlankEnum = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AssistantTrainingProgressaseStatusEnum = nil
		dst.BlankEnum = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AssistantTrainingProgressaseStatus)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AssistantTrainingProgressaseStatus)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AssistantTrainingProgressaseStatus) MarshalJSON() ([]byte, error) {
	if src.AssistantTrainingProgressaseStatusEnum != nil {
		return json.Marshal(&src.AssistantTrainingProgressaseStatusEnum)
	}

	if src.BlankEnum != nil {
		return json.Marshal(&src.BlankEnum)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AssistantTrainingProgressaseStatus) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AssistantTrainingProgressaseStatusEnum != nil {
		return obj.AssistantTrainingProgressaseStatusEnum
	}

	if obj.BlankEnum != nil {
		return obj.BlankEnum
	}

	// all schemas are nil
	return nil
}

type NullableAssistantTrainingProgressaseStatus struct {
	value *AssistantTrainingProgressaseStatus
	isSet bool
}

func (v NullableAssistantTrainingProgressaseStatus) Get() *AssistantTrainingProgressaseStatus {
	return v.value
}

func (v *NullableAssistantTrainingProgressaseStatus) Set(val *AssistantTrainingProgressaseStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistantTrainingProgressaseStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistantTrainingProgressaseStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistantTrainingProgressaseStatus(val *AssistantTrainingProgressaseStatus) *NullableAssistantTrainingProgressaseStatus {
	return &NullableAssistantTrainingProgressaseStatus{value: val, isSet: true}
}

func (v NullableAssistantTrainingProgressaseStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistantTrainingProgressaseStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


