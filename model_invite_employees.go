/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InviteEmployees type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InviteEmployees{}

// InviteEmployees struct for InviteEmployees
type InviteEmployees struct {
	Email string `json:"email"`
	// The tenant chats ID.
	TenantId int32 `json:"tenant_id"`
	UserType NullableUserType3daEnum `json:"user_type,omitempty"`
}

type _InviteEmployees InviteEmployees

// NewInviteEmployees instantiates a new InviteEmployees object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInviteEmployees(email string, tenantId int32) *InviteEmployees {
	this := InviteEmployees{}
	this.Email = email
	this.TenantId = tenantId
	return &this
}

// NewInviteEmployeesWithDefaults instantiates a new InviteEmployees object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInviteEmployeesWithDefaults() *InviteEmployees {
	this := InviteEmployees{}
	return &this
}

// GetEmail returns the Email field value
func (o *InviteEmployees) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *InviteEmployees) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *InviteEmployees) SetEmail(v string) {
	o.Email = v
}

// GetTenantId returns the TenantId field value
func (o *InviteEmployees) GetTenantId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *InviteEmployees) GetTenantIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *InviteEmployees) SetTenantId(v int32) {
	o.TenantId = v
}

// GetUserType returns the UserType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InviteEmployees) GetUserType() UserType3daEnum {
	if o == nil || IsNil(o.UserType.Get()) {
		var ret UserType3daEnum
		return ret
	}
	return *o.UserType.Get()
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InviteEmployees) GetUserTypeOk() (*UserType3daEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserType.Get(), o.UserType.IsSet()
}

// HasUserType returns a boolean if a field has been set.
func (o *InviteEmployees) HasUserType() bool {
	if o != nil && o.UserType.IsSet() {
		return true
	}

	return false
}

// SetUserType gets a reference to the given NullableUserType3daEnum and assigns it to the UserType field.
func (o *InviteEmployees) SetUserType(v UserType3daEnum) {
	o.UserType.Set(&v)
}
// SetUserTypeNil sets the value for UserType to be an explicit nil
func (o *InviteEmployees) SetUserTypeNil() {
	o.UserType.Set(nil)
}

// UnsetUserType ensures that no value is present for UserType, not even an explicit nil
func (o *InviteEmployees) UnsetUserType() {
	o.UserType.Unset()
}

func (o InviteEmployees) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InviteEmployees) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["tenant_id"] = o.TenantId
	if o.UserType.IsSet() {
		toSerialize["user_type"] = o.UserType.Get()
	}
	return toSerialize, nil
}

func (o *InviteEmployees) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"tenant_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInviteEmployees := _InviteEmployees{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInviteEmployees)

	if err != nil {
		return err
	}

	*o = InviteEmployees(varInviteEmployees)

	return err
}

type NullableInviteEmployees struct {
	value *InviteEmployees
	isSet bool
}

func (v NullableInviteEmployees) Get() *InviteEmployees {
	return v.value
}

func (v *NullableInviteEmployees) Set(val *InviteEmployees) {
	v.value = val
	v.isSet = true
}

func (v NullableInviteEmployees) IsSet() bool {
	return v.isSet
}

func (v *NullableInviteEmployees) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInviteEmployees(val *InviteEmployees) *NullableInviteEmployees {
	return &NullableInviteEmployees{value: val, isSet: true}
}

func (v NullableInviteEmployees) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInviteEmployees) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


