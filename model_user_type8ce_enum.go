/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// UserType8ceEnum * `client` - client * `employee` - employee * `admin` - admin
type UserType8ceEnum string

// List of UserType8ceEnum
const (
	CLIENT UserType8ceEnum = "client"
	EMPLOYEE UserType8ceEnum = "employee"
	ADMIN UserType8ceEnum = "admin"
)

// All allowed values of UserType8ceEnum enum
var AllowedUserType8ceEnumEnumValues = []UserType8ceEnum{
	"client",
	"employee",
	"admin",
}

func (v *UserType8ceEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserType8ceEnum(value)
	for _, existing := range AllowedUserType8ceEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserType8ceEnum", value)
}

// NewUserType8ceEnumFromValue returns a pointer to a valid UserType8ceEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserType8ceEnumFromValue(v string) (*UserType8ceEnum, error) {
	ev := UserType8ceEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserType8ceEnum: valid values are %v", v, AllowedUserType8ceEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserType8ceEnum) IsValid() bool {
	for _, existing := range AllowedUserType8ceEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserType8ceEnum value
func (v UserType8ceEnum) Ptr() *UserType8ceEnum {
	return &v
}

type NullableUserType8ceEnum struct {
	value *UserType8ceEnum
	isSet bool
}

func (v NullableUserType8ceEnum) Get() *UserType8ceEnum {
	return v.value
}

func (v *NullableUserType8ceEnum) Set(val *UserType8ceEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableUserType8ceEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableUserType8ceEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserType8ceEnum(val *UserType8ceEnum) *NullableUserType8ceEnum {
	return &NullableUserType8ceEnum{value: val, isSet: true}
}

func (v NullableUserType8ceEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserType8ceEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

