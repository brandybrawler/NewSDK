/*
proxima-core-engine

Testing AnalyticsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_AnalyticsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AnalyticsAPIService AnalyticsAnnualGrothRateRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsAnnualGrothRateRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsAveragecommentsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsAveragecommentsRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsAveragedistributionRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsAveragedistributionRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsAverageresponsetimeRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsAverageresponsetimeRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsAveragesurveyrunperiodRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsAveragesurveyrunperiodRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsAveragevoicemessageperchatRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsAveragevoicemessageperchatRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsClientcitydistributionRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsClientcitydistributionRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsClientdailysatisfactionRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsClientdailysatisfactionRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsClientsatisfactionRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsClientsatisfactionRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsClientsaverageageRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsClientsaverageageRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsClientweeklysatisfactionRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsClientweeklysatisfactionRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsCommentsuserrelationRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsCommentsuserrelationRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsCommunicationchannelsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsCommunicationchannelsRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsCommunitygrowthrateRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsCommunitygrowthrateRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsCommunitymembersRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsCommunitymembersRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsCommunityratingRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsCommunityratingRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsCountchatsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsCountchatsRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsCountescalatedchatsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsCountescalatedchatsRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsCounthourlychatsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsCounthourlychatsRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsCountrydistributionRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsCountrydistributionRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsCumulativecommentsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsCumulativecommentsRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsCumulativehourlychatsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsCumulativehourlychatsRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsCumulativeissuesRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsCumulativeissuesRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsCumulativevoicemessageRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsCumulativevoicemessageRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsDailyaverageresponserateRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsDailyaverageresponserateRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsDailychatcountRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsDailychatcountRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsDailyescalatedchatsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsDailyescalatedchatsRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsEngagementfrequencyRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsEngagementfrequencyRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsGenderdistributionRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsGenderdistributionRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsGeolocationRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsGeolocationRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsHourlyaverageresponsetimeRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsHourlyaverageresponsetimeRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsHourlyclientsatisfactionRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsHourlyclientsatisfactionRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsHourlycountescalatedchatsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsHourlycountescalatedchatsRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsIssueuserrelationRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsIssueuserrelationRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsLeasttopicsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsLeasttopicsRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsPopulartopicsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsPopulartopicsRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsStatedistributionRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsStatedistributionRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsSurveyaveragetargetaudienceRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsSurveyaveragetargetaudienceRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsSurveyratingsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsSurveyratingsRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsSurveyresponserateRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsSurveyresponserateRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsTotalsurveysRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsTotalsurveysRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsUniquecommentsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsUniquecommentsRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsUsersegmentationRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsUsersegmentationRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsVoiveMessagesLastWeekRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsVoiveMessagesLastWeekRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsVoiveMessagesLastdayRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsVoiveMessagesLastdayRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsVoiveMessagesLasthourRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsVoiveMessagesLasthourRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsWeeklyaverageresponserateRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsWeeklyaverageresponserateRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsWeeklychatcountRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsWeeklychatcountRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalyticsAPIService AnalyticsWeeklyescalatedchatsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AnalyticsAPI.AnalyticsWeeklyescalatedchatsRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
