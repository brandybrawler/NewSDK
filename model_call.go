/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Call type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Call{}

// Call struct for Call
type Call struct {
	// The call id.
	CallId int32 `json:"call_id"`
	TenantId TenantInfo `json:"tenant_id"`
	Duration string `json:"duration"`
	Success bool `json:"success"`
	ClientCaller ClientInfo `json:"client_caller"`
	// Display name of the client
	GuestCalled NullableInt32 `json:"guest_called,omitempty"`
}

type _Call Call

// NewCall instantiates a new Call object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCall(callId int32, tenantId TenantInfo, duration string, success bool, clientCaller ClientInfo) *Call {
	this := Call{}
	this.CallId = callId
	this.TenantId = tenantId
	this.Duration = duration
	this.Success = success
	this.ClientCaller = clientCaller
	return &this
}

// NewCallWithDefaults instantiates a new Call object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallWithDefaults() *Call {
	this := Call{}
	return &this
}

// GetCallId returns the CallId field value
func (o *Call) GetCallId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CallId
}

// GetCallIdOk returns a tuple with the CallId field value
// and a boolean to check if the value has been set.
func (o *Call) GetCallIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallId, true
}

// SetCallId sets field value
func (o *Call) SetCallId(v int32) {
	o.CallId = v
}

// GetTenantId returns the TenantId field value
func (o *Call) GetTenantId() TenantInfo {
	if o == nil {
		var ret TenantInfo
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *Call) GetTenantIdOk() (*TenantInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *Call) SetTenantId(v TenantInfo) {
	o.TenantId = v
}

// GetDuration returns the Duration field value
func (o *Call) GetDuration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *Call) GetDurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *Call) SetDuration(v string) {
	o.Duration = v
}

// GetSuccess returns the Success field value
func (o *Call) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *Call) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *Call) SetSuccess(v bool) {
	o.Success = v
}

// GetClientCaller returns the ClientCaller field value
func (o *Call) GetClientCaller() ClientInfo {
	if o == nil {
		var ret ClientInfo
		return ret
	}

	return o.ClientCaller
}

// GetClientCallerOk returns a tuple with the ClientCaller field value
// and a boolean to check if the value has been set.
func (o *Call) GetClientCallerOk() (*ClientInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientCaller, true
}

// SetClientCaller sets field value
func (o *Call) SetClientCaller(v ClientInfo) {
	o.ClientCaller = v
}

// GetGuestCalled returns the GuestCalled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Call) GetGuestCalled() int32 {
	if o == nil || IsNil(o.GuestCalled.Get()) {
		var ret int32
		return ret
	}
	return *o.GuestCalled.Get()
}

// GetGuestCalledOk returns a tuple with the GuestCalled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Call) GetGuestCalledOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.GuestCalled.Get(), o.GuestCalled.IsSet()
}

// HasGuestCalled returns a boolean if a field has been set.
func (o *Call) HasGuestCalled() bool {
	if o != nil && o.GuestCalled.IsSet() {
		return true
	}

	return false
}

// SetGuestCalled gets a reference to the given NullableInt32 and assigns it to the GuestCalled field.
func (o *Call) SetGuestCalled(v int32) {
	o.GuestCalled.Set(&v)
}
// SetGuestCalledNil sets the value for GuestCalled to be an explicit nil
func (o *Call) SetGuestCalledNil() {
	o.GuestCalled.Set(nil)
}

// UnsetGuestCalled ensures that no value is present for GuestCalled, not even an explicit nil
func (o *Call) UnsetGuestCalled() {
	o.GuestCalled.Unset()
}

func (o Call) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Call) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["call_id"] = o.CallId
	toSerialize["tenant_id"] = o.TenantId
	toSerialize["duration"] = o.Duration
	toSerialize["success"] = o.Success
	toSerialize["client_caller"] = o.ClientCaller
	if o.GuestCalled.IsSet() {
		toSerialize["guest_called"] = o.GuestCalled.Get()
	}
	return toSerialize, nil
}

func (o *Call) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"call_id",
		"tenant_id",
		"duration",
		"success",
		"client_caller",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCall := _Call{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCall)

	if err != nil {
		return err
	}

	*o = Call(varCall)

	return err
}

type NullableCall struct {
	value *Call
	isSet bool
}

func (v NullableCall) Get() *Call {
	return v.value
}

func (v *NullableCall) Set(val *Call) {
	v.value = val
	v.isSet = true
}

func (v NullableCall) IsSet() bool {
	return v.isSet
}

func (v *NullableCall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCall(val *Call) *NullableCall {
	return &NullableCall{value: val, isSet: true}
}

func (v NullableCall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


