/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Community type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Community{}

// Community struct for Community
type Community struct {
	// The tenant community ID UUID.
	CommunityId int32 `json:"community_id"`
	TenantId CommunityTenant `json:"tenant_id"`
	// Description of the community.
	Description NullableString `json:"description,omitempty"`
	Members []Member `json:"members"`
}

type _Community Community

// NewCommunity instantiates a new Community object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommunity(communityId int32, tenantId CommunityTenant, members []Member) *Community {
	this := Community{}
	this.CommunityId = communityId
	this.TenantId = tenantId
	this.Members = members
	return &this
}

// NewCommunityWithDefaults instantiates a new Community object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommunityWithDefaults() *Community {
	this := Community{}
	return &this
}

// GetCommunityId returns the CommunityId field value
func (o *Community) GetCommunityId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CommunityId
}

// GetCommunityIdOk returns a tuple with the CommunityId field value
// and a boolean to check if the value has been set.
func (o *Community) GetCommunityIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommunityId, true
}

// SetCommunityId sets field value
func (o *Community) SetCommunityId(v int32) {
	o.CommunityId = v
}

// GetTenantId returns the TenantId field value
func (o *Community) GetTenantId() CommunityTenant {
	if o == nil {
		var ret CommunityTenant
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *Community) GetTenantIdOk() (*CommunityTenant, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *Community) SetTenantId(v CommunityTenant) {
	o.TenantId = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Community) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Community) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Community) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Community) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Community) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Community) UnsetDescription() {
	o.Description.Unset()
}

// GetMembers returns the Members field value
func (o *Community) GetMembers() []Member {
	if o == nil {
		var ret []Member
		return ret
	}

	return o.Members
}

// GetMembersOk returns a tuple with the Members field value
// and a boolean to check if the value has been set.
func (o *Community) GetMembersOk() ([]Member, bool) {
	if o == nil {
		return nil, false
	}
	return o.Members, true
}

// SetMembers sets field value
func (o *Community) SetMembers(v []Member) {
	o.Members = v
}

func (o Community) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Community) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["community_id"] = o.CommunityId
	toSerialize["tenant_id"] = o.TenantId
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["members"] = o.Members
	return toSerialize, nil
}

func (o *Community) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"community_id",
		"tenant_id",
		"members",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommunity := _Community{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommunity)

	if err != nil {
		return err
	}

	*o = Community(varCommunity)

	return err
}

type NullableCommunity struct {
	value *Community
	isSet bool
}

func (v NullableCommunity) Get() *Community {
	return v.value
}

func (v *NullableCommunity) Set(val *Community) {
	v.value = val
	v.isSet = true
}

func (v NullableCommunity) IsSet() bool {
	return v.isSet
}

func (v *NullableCommunity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommunity(val *Community) *NullableCommunity {
	return &NullableCommunity{value: val, isSet: true}
}

func (v NullableCommunity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommunity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


