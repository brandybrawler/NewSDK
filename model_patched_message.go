/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PatchedMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedMessage{}

// PatchedMessage struct for PatchedMessage
type PatchedMessage struct {
	// The message ID UUID for an instance of a chat.
	MessageId *int32 `json:"message_id,omitempty"`
	// The chat ID UUID for an instance of a chat.
	ChatId *int32 `json:"chat_id,omitempty"`
	// Message text content
	TextContent NullableString `json:"text_content,omitempty"`
	// The voice note sent
	VoiceContent NullableString `json:"voice_content,omitempty"`
	// Either the message is sent by the agent or by the tenant  * `client` - client * `tenant` - tenant * `tenant_iva` - tenant_iva * `anonymous_client` - anonymous_client
	MessageSender *MessageSenderEnum `json:"message_sender,omitempty"`
	// Say whether a client escalated a chat to a human agent.
	Escalated NullableBool `json:"escalated,omitempty"`
	Channel NullableChannelEnum `json:"channel,omitempty"`
	Topic NullableTopicEnum `json:"topic,omitempty"`
}

// NewPatchedMessage instantiates a new PatchedMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedMessage() *PatchedMessage {
	this := PatchedMessage{}
	return &this
}

// NewPatchedMessageWithDefaults instantiates a new PatchedMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedMessageWithDefaults() *PatchedMessage {
	this := PatchedMessage{}
	return &this
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *PatchedMessage) GetMessageId() int32 {
	if o == nil || IsNil(o.MessageId) {
		var ret int32
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedMessage) GetMessageIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MessageId) {
		return nil, false
	}
	return o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *PatchedMessage) HasMessageId() bool {
	if o != nil && !IsNil(o.MessageId) {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given int32 and assigns it to the MessageId field.
func (o *PatchedMessage) SetMessageId(v int32) {
	o.MessageId = &v
}

// GetChatId returns the ChatId field value if set, zero value otherwise.
func (o *PatchedMessage) GetChatId() int32 {
	if o == nil || IsNil(o.ChatId) {
		var ret int32
		return ret
	}
	return *o.ChatId
}

// GetChatIdOk returns a tuple with the ChatId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedMessage) GetChatIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ChatId) {
		return nil, false
	}
	return o.ChatId, true
}

// HasChatId returns a boolean if a field has been set.
func (o *PatchedMessage) HasChatId() bool {
	if o != nil && !IsNil(o.ChatId) {
		return true
	}

	return false
}

// SetChatId gets a reference to the given int32 and assigns it to the ChatId field.
func (o *PatchedMessage) SetChatId(v int32) {
	o.ChatId = &v
}

// GetTextContent returns the TextContent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedMessage) GetTextContent() string {
	if o == nil || IsNil(o.TextContent.Get()) {
		var ret string
		return ret
	}
	return *o.TextContent.Get()
}

// GetTextContentOk returns a tuple with the TextContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedMessage) GetTextContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TextContent.Get(), o.TextContent.IsSet()
}

// HasTextContent returns a boolean if a field has been set.
func (o *PatchedMessage) HasTextContent() bool {
	if o != nil && o.TextContent.IsSet() {
		return true
	}

	return false
}

// SetTextContent gets a reference to the given NullableString and assigns it to the TextContent field.
func (o *PatchedMessage) SetTextContent(v string) {
	o.TextContent.Set(&v)
}
// SetTextContentNil sets the value for TextContent to be an explicit nil
func (o *PatchedMessage) SetTextContentNil() {
	o.TextContent.Set(nil)
}

// UnsetTextContent ensures that no value is present for TextContent, not even an explicit nil
func (o *PatchedMessage) UnsetTextContent() {
	o.TextContent.Unset()
}

// GetVoiceContent returns the VoiceContent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedMessage) GetVoiceContent() string {
	if o == nil || IsNil(o.VoiceContent.Get()) {
		var ret string
		return ret
	}
	return *o.VoiceContent.Get()
}

// GetVoiceContentOk returns a tuple with the VoiceContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedMessage) GetVoiceContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VoiceContent.Get(), o.VoiceContent.IsSet()
}

// HasVoiceContent returns a boolean if a field has been set.
func (o *PatchedMessage) HasVoiceContent() bool {
	if o != nil && o.VoiceContent.IsSet() {
		return true
	}

	return false
}

// SetVoiceContent gets a reference to the given NullableString and assigns it to the VoiceContent field.
func (o *PatchedMessage) SetVoiceContent(v string) {
	o.VoiceContent.Set(&v)
}
// SetVoiceContentNil sets the value for VoiceContent to be an explicit nil
func (o *PatchedMessage) SetVoiceContentNil() {
	o.VoiceContent.Set(nil)
}

// UnsetVoiceContent ensures that no value is present for VoiceContent, not even an explicit nil
func (o *PatchedMessage) UnsetVoiceContent() {
	o.VoiceContent.Unset()
}

// GetMessageSender returns the MessageSender field value if set, zero value otherwise.
func (o *PatchedMessage) GetMessageSender() MessageSenderEnum {
	if o == nil || IsNil(o.MessageSender) {
		var ret MessageSenderEnum
		return ret
	}
	return *o.MessageSender
}

// GetMessageSenderOk returns a tuple with the MessageSender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedMessage) GetMessageSenderOk() (*MessageSenderEnum, bool) {
	if o == nil || IsNil(o.MessageSender) {
		return nil, false
	}
	return o.MessageSender, true
}

// HasMessageSender returns a boolean if a field has been set.
func (o *PatchedMessage) HasMessageSender() bool {
	if o != nil && !IsNil(o.MessageSender) {
		return true
	}

	return false
}

// SetMessageSender gets a reference to the given MessageSenderEnum and assigns it to the MessageSender field.
func (o *PatchedMessage) SetMessageSender(v MessageSenderEnum) {
	o.MessageSender = &v
}

// GetEscalated returns the Escalated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedMessage) GetEscalated() bool {
	if o == nil || IsNil(o.Escalated.Get()) {
		var ret bool
		return ret
	}
	return *o.Escalated.Get()
}

// GetEscalatedOk returns a tuple with the Escalated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedMessage) GetEscalatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Escalated.Get(), o.Escalated.IsSet()
}

// HasEscalated returns a boolean if a field has been set.
func (o *PatchedMessage) HasEscalated() bool {
	if o != nil && o.Escalated.IsSet() {
		return true
	}

	return false
}

// SetEscalated gets a reference to the given NullableBool and assigns it to the Escalated field.
func (o *PatchedMessage) SetEscalated(v bool) {
	o.Escalated.Set(&v)
}
// SetEscalatedNil sets the value for Escalated to be an explicit nil
func (o *PatchedMessage) SetEscalatedNil() {
	o.Escalated.Set(nil)
}

// UnsetEscalated ensures that no value is present for Escalated, not even an explicit nil
func (o *PatchedMessage) UnsetEscalated() {
	o.Escalated.Unset()
}

// GetChannel returns the Channel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedMessage) GetChannel() ChannelEnum {
	if o == nil || IsNil(o.Channel.Get()) {
		var ret ChannelEnum
		return ret
	}
	return *o.Channel.Get()
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedMessage) GetChannelOk() (*ChannelEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.Channel.Get(), o.Channel.IsSet()
}

// HasChannel returns a boolean if a field has been set.
func (o *PatchedMessage) HasChannel() bool {
	if o != nil && o.Channel.IsSet() {
		return true
	}

	return false
}

// SetChannel gets a reference to the given NullableChannelEnum and assigns it to the Channel field.
func (o *PatchedMessage) SetChannel(v ChannelEnum) {
	o.Channel.Set(&v)
}
// SetChannelNil sets the value for Channel to be an explicit nil
func (o *PatchedMessage) SetChannelNil() {
	o.Channel.Set(nil)
}

// UnsetChannel ensures that no value is present for Channel, not even an explicit nil
func (o *PatchedMessage) UnsetChannel() {
	o.Channel.Unset()
}

// GetTopic returns the Topic field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedMessage) GetTopic() TopicEnum {
	if o == nil || IsNil(o.Topic.Get()) {
		var ret TopicEnum
		return ret
	}
	return *o.Topic.Get()
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedMessage) GetTopicOk() (*TopicEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.Topic.Get(), o.Topic.IsSet()
}

// HasTopic returns a boolean if a field has been set.
func (o *PatchedMessage) HasTopic() bool {
	if o != nil && o.Topic.IsSet() {
		return true
	}

	return false
}

// SetTopic gets a reference to the given NullableTopicEnum and assigns it to the Topic field.
func (o *PatchedMessage) SetTopic(v TopicEnum) {
	o.Topic.Set(&v)
}
// SetTopicNil sets the value for Topic to be an explicit nil
func (o *PatchedMessage) SetTopicNil() {
	o.Topic.Set(nil)
}

// UnsetTopic ensures that no value is present for Topic, not even an explicit nil
func (o *PatchedMessage) UnsetTopic() {
	o.Topic.Unset()
}

func (o PatchedMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MessageId) {
		toSerialize["message_id"] = o.MessageId
	}
	if !IsNil(o.ChatId) {
		toSerialize["chat_id"] = o.ChatId
	}
	if o.TextContent.IsSet() {
		toSerialize["text_content"] = o.TextContent.Get()
	}
	if o.VoiceContent.IsSet() {
		toSerialize["voice_content"] = o.VoiceContent.Get()
	}
	if !IsNil(o.MessageSender) {
		toSerialize["message_sender"] = o.MessageSender
	}
	if o.Escalated.IsSet() {
		toSerialize["escalated"] = o.Escalated.Get()
	}
	if o.Channel.IsSet() {
		toSerialize["channel"] = o.Channel.Get()
	}
	if o.Topic.IsSet() {
		toSerialize["topic"] = o.Topic.Get()
	}
	return toSerialize, nil
}

type NullablePatchedMessage struct {
	value *PatchedMessage
	isSet bool
}

func (v NullablePatchedMessage) Get() *PatchedMessage {
	return v.value
}

func (v *NullablePatchedMessage) Set(val *PatchedMessage) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedMessage) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedMessage(val *PatchedMessage) *NullablePatchedMessage {
	return &NullablePatchedMessage{value: val, isSet: true}
}

func (v NullablePatchedMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


