/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Delegation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Delegation{}

// Delegation struct for Delegation
type Delegation struct {
	DelegationId int32 `json:"delegation_id"`
	TenantId TenantInfo `json:"tenant_id"`
	Employee []Employee `json:"employee"`
	Admin []Admin `json:"admin"`
	// The issue ID UUID .
	AssignedIssue NullableInt32 `json:"assigned_issue,omitempty"`
	// The chat ID UUID for an instance of a chat.
	AssignedChat NullableInt32 `json:"assigned_chat,omitempty"`
	AssignedService NullableInt32 `json:"assigned_service,omitempty"`
	// The timestamp of the chat.
	Timestamp NullableTime `json:"timestamp"`
	DelegatedBy NullableInt32 `json:"delegated_by,omitempty"`
	// The department ID.
	DepartmentDelegatedTo NullableInt32 `json:"department_delegated_to,omitempty"`
}

type _Delegation Delegation

// NewDelegation instantiates a new Delegation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDelegation(delegationId int32, tenantId TenantInfo, employee []Employee, admin []Admin, timestamp NullableTime) *Delegation {
	this := Delegation{}
	this.DelegationId = delegationId
	this.TenantId = tenantId
	this.Employee = employee
	this.Admin = admin
	this.Timestamp = timestamp
	return &this
}

// NewDelegationWithDefaults instantiates a new Delegation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDelegationWithDefaults() *Delegation {
	this := Delegation{}
	return &this
}

// GetDelegationId returns the DelegationId field value
func (o *Delegation) GetDelegationId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DelegationId
}

// GetDelegationIdOk returns a tuple with the DelegationId field value
// and a boolean to check if the value has been set.
func (o *Delegation) GetDelegationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DelegationId, true
}

// SetDelegationId sets field value
func (o *Delegation) SetDelegationId(v int32) {
	o.DelegationId = v
}

// GetTenantId returns the TenantId field value
func (o *Delegation) GetTenantId() TenantInfo {
	if o == nil {
		var ret TenantInfo
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *Delegation) GetTenantIdOk() (*TenantInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *Delegation) SetTenantId(v TenantInfo) {
	o.TenantId = v
}

// GetEmployee returns the Employee field value
func (o *Delegation) GetEmployee() []Employee {
	if o == nil {
		var ret []Employee
		return ret
	}

	return o.Employee
}

// GetEmployeeOk returns a tuple with the Employee field value
// and a boolean to check if the value has been set.
func (o *Delegation) GetEmployeeOk() ([]Employee, bool) {
	if o == nil {
		return nil, false
	}
	return o.Employee, true
}

// SetEmployee sets field value
func (o *Delegation) SetEmployee(v []Employee) {
	o.Employee = v
}

// GetAdmin returns the Admin field value
func (o *Delegation) GetAdmin() []Admin {
	if o == nil {
		var ret []Admin
		return ret
	}

	return o.Admin
}

// GetAdminOk returns a tuple with the Admin field value
// and a boolean to check if the value has been set.
func (o *Delegation) GetAdminOk() ([]Admin, bool) {
	if o == nil {
		return nil, false
	}
	return o.Admin, true
}

// SetAdmin sets field value
func (o *Delegation) SetAdmin(v []Admin) {
	o.Admin = v
}

// GetAssignedIssue returns the AssignedIssue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Delegation) GetAssignedIssue() int32 {
	if o == nil || IsNil(o.AssignedIssue.Get()) {
		var ret int32
		return ret
	}
	return *o.AssignedIssue.Get()
}

// GetAssignedIssueOk returns a tuple with the AssignedIssue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Delegation) GetAssignedIssueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssignedIssue.Get(), o.AssignedIssue.IsSet()
}

// HasAssignedIssue returns a boolean if a field has been set.
func (o *Delegation) HasAssignedIssue() bool {
	if o != nil && o.AssignedIssue.IsSet() {
		return true
	}

	return false
}

// SetAssignedIssue gets a reference to the given NullableInt32 and assigns it to the AssignedIssue field.
func (o *Delegation) SetAssignedIssue(v int32) {
	o.AssignedIssue.Set(&v)
}
// SetAssignedIssueNil sets the value for AssignedIssue to be an explicit nil
func (o *Delegation) SetAssignedIssueNil() {
	o.AssignedIssue.Set(nil)
}

// UnsetAssignedIssue ensures that no value is present for AssignedIssue, not even an explicit nil
func (o *Delegation) UnsetAssignedIssue() {
	o.AssignedIssue.Unset()
}

// GetAssignedChat returns the AssignedChat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Delegation) GetAssignedChat() int32 {
	if o == nil || IsNil(o.AssignedChat.Get()) {
		var ret int32
		return ret
	}
	return *o.AssignedChat.Get()
}

// GetAssignedChatOk returns a tuple with the AssignedChat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Delegation) GetAssignedChatOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssignedChat.Get(), o.AssignedChat.IsSet()
}

// HasAssignedChat returns a boolean if a field has been set.
func (o *Delegation) HasAssignedChat() bool {
	if o != nil && o.AssignedChat.IsSet() {
		return true
	}

	return false
}

// SetAssignedChat gets a reference to the given NullableInt32 and assigns it to the AssignedChat field.
func (o *Delegation) SetAssignedChat(v int32) {
	o.AssignedChat.Set(&v)
}
// SetAssignedChatNil sets the value for AssignedChat to be an explicit nil
func (o *Delegation) SetAssignedChatNil() {
	o.AssignedChat.Set(nil)
}

// UnsetAssignedChat ensures that no value is present for AssignedChat, not even an explicit nil
func (o *Delegation) UnsetAssignedChat() {
	o.AssignedChat.Unset()
}

// GetAssignedService returns the AssignedService field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Delegation) GetAssignedService() int32 {
	if o == nil || IsNil(o.AssignedService.Get()) {
		var ret int32
		return ret
	}
	return *o.AssignedService.Get()
}

// GetAssignedServiceOk returns a tuple with the AssignedService field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Delegation) GetAssignedServiceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssignedService.Get(), o.AssignedService.IsSet()
}

// HasAssignedService returns a boolean if a field has been set.
func (o *Delegation) HasAssignedService() bool {
	if o != nil && o.AssignedService.IsSet() {
		return true
	}

	return false
}

// SetAssignedService gets a reference to the given NullableInt32 and assigns it to the AssignedService field.
func (o *Delegation) SetAssignedService(v int32) {
	o.AssignedService.Set(&v)
}
// SetAssignedServiceNil sets the value for AssignedService to be an explicit nil
func (o *Delegation) SetAssignedServiceNil() {
	o.AssignedService.Set(nil)
}

// UnsetAssignedService ensures that no value is present for AssignedService, not even an explicit nil
func (o *Delegation) UnsetAssignedService() {
	o.AssignedService.Unset()
}

// GetTimestamp returns the Timestamp field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Delegation) GetTimestamp() time.Time {
	if o == nil || o.Timestamp.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Delegation) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// SetTimestamp sets field value
func (o *Delegation) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}

// GetDelegatedBy returns the DelegatedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Delegation) GetDelegatedBy() int32 {
	if o == nil || IsNil(o.DelegatedBy.Get()) {
		var ret int32
		return ret
	}
	return *o.DelegatedBy.Get()
}

// GetDelegatedByOk returns a tuple with the DelegatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Delegation) GetDelegatedByOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DelegatedBy.Get(), o.DelegatedBy.IsSet()
}

// HasDelegatedBy returns a boolean if a field has been set.
func (o *Delegation) HasDelegatedBy() bool {
	if o != nil && o.DelegatedBy.IsSet() {
		return true
	}

	return false
}

// SetDelegatedBy gets a reference to the given NullableInt32 and assigns it to the DelegatedBy field.
func (o *Delegation) SetDelegatedBy(v int32) {
	o.DelegatedBy.Set(&v)
}
// SetDelegatedByNil sets the value for DelegatedBy to be an explicit nil
func (o *Delegation) SetDelegatedByNil() {
	o.DelegatedBy.Set(nil)
}

// UnsetDelegatedBy ensures that no value is present for DelegatedBy, not even an explicit nil
func (o *Delegation) UnsetDelegatedBy() {
	o.DelegatedBy.Unset()
}

// GetDepartmentDelegatedTo returns the DepartmentDelegatedTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Delegation) GetDepartmentDelegatedTo() int32 {
	if o == nil || IsNil(o.DepartmentDelegatedTo.Get()) {
		var ret int32
		return ret
	}
	return *o.DepartmentDelegatedTo.Get()
}

// GetDepartmentDelegatedToOk returns a tuple with the DepartmentDelegatedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Delegation) GetDepartmentDelegatedToOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DepartmentDelegatedTo.Get(), o.DepartmentDelegatedTo.IsSet()
}

// HasDepartmentDelegatedTo returns a boolean if a field has been set.
func (o *Delegation) HasDepartmentDelegatedTo() bool {
	if o != nil && o.DepartmentDelegatedTo.IsSet() {
		return true
	}

	return false
}

// SetDepartmentDelegatedTo gets a reference to the given NullableInt32 and assigns it to the DepartmentDelegatedTo field.
func (o *Delegation) SetDepartmentDelegatedTo(v int32) {
	o.DepartmentDelegatedTo.Set(&v)
}
// SetDepartmentDelegatedToNil sets the value for DepartmentDelegatedTo to be an explicit nil
func (o *Delegation) SetDepartmentDelegatedToNil() {
	o.DepartmentDelegatedTo.Set(nil)
}

// UnsetDepartmentDelegatedTo ensures that no value is present for DepartmentDelegatedTo, not even an explicit nil
func (o *Delegation) UnsetDepartmentDelegatedTo() {
	o.DepartmentDelegatedTo.Unset()
}

func (o Delegation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Delegation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["delegation_id"] = o.DelegationId
	toSerialize["tenant_id"] = o.TenantId
	toSerialize["employee"] = o.Employee
	toSerialize["admin"] = o.Admin
	if o.AssignedIssue.IsSet() {
		toSerialize["assigned_issue"] = o.AssignedIssue.Get()
	}
	if o.AssignedChat.IsSet() {
		toSerialize["assigned_chat"] = o.AssignedChat.Get()
	}
	if o.AssignedService.IsSet() {
		toSerialize["assigned_service"] = o.AssignedService.Get()
	}
	toSerialize["timestamp"] = o.Timestamp.Get()
	if o.DelegatedBy.IsSet() {
		toSerialize["delegated_by"] = o.DelegatedBy.Get()
	}
	if o.DepartmentDelegatedTo.IsSet() {
		toSerialize["department_delegated_to"] = o.DepartmentDelegatedTo.Get()
	}
	return toSerialize, nil
}

func (o *Delegation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"delegation_id",
		"tenant_id",
		"employee",
		"admin",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDelegation := _Delegation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDelegation)

	if err != nil {
		return err
	}

	*o = Delegation(varDelegation)

	return err
}

type NullableDelegation struct {
	value *Delegation
	isSet bool
}

func (v NullableDelegation) Get() *Delegation {
	return v.value
}

func (v *NullableDelegation) Set(val *Delegation) {
	v.value = val
	v.isSet = true
}

func (v NullableDelegation) IsSet() bool {
	return v.isSet
}

func (v *NullableDelegation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDelegation(val *Delegation) *NullableDelegation {
	return &NullableDelegation{value: val, isSet: true}
}

func (v NullableDelegation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDelegation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


