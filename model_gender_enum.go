/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GenderEnum * `Male` - Male * `Female` - Female * `Other` - Other
type GenderEnum string

// List of GenderEnum
const (
	MALE GenderEnum = "Male"
	FEMALE GenderEnum = "Female"
	OTHER GenderEnum = "Other"
)

// All allowed values of GenderEnum enum
var AllowedGenderEnumEnumValues = []GenderEnum{
	"Male",
	"Female",
	"Other",
}

func (v *GenderEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GenderEnum(value)
	for _, existing := range AllowedGenderEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GenderEnum", value)
}

// NewGenderEnumFromValue returns a pointer to a valid GenderEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGenderEnumFromValue(v string) (*GenderEnum, error) {
	ev := GenderEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GenderEnum: valid values are %v", v, AllowedGenderEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GenderEnum) IsValid() bool {
	for _, existing := range AllowedGenderEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GenderEnum value
func (v GenderEnum) Ptr() *GenderEnum {
	return &v
}

type NullableGenderEnum struct {
	value *GenderEnum
	isSet bool
}

func (v NullableGenderEnum) Get() *GenderEnum {
	return v.value
}

func (v *NullableGenderEnum) Set(val *GenderEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableGenderEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableGenderEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenderEnum(val *GenderEnum) *NullableGenderEnum {
	return &NullableGenderEnum{value: val, isSet: true}
}

func (v NullableGenderEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenderEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

