/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PatchedKnowledgebase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedKnowledgebase{}

// PatchedKnowledgebase struct for PatchedKnowledgebase
type PatchedKnowledgebase struct {
	// The tenant chats ID.
	KnowledgebaseId *int32 `json:"knowledgebase_id,omitempty"`
	// Display name of the tenant
	TenantId *int32 `json:"tenant_id,omitempty"`
	// The name of the knowledgebase
	Name *string `json:"name,omitempty"`
	// description
	Description NullableString `json:"description,omitempty"`
	TypeOfDatasource NullableString `json:"type_of_datasource,omitempty"`
	// This will be responsible for ft=etching the information source passed
	DatasourceTarget NullableString `json:"datasource_target,omitempty"`
	ChatPrompts []ChatPrompts `json:"chat_prompts,omitempty"`
	CommunityPrompts []CommunityPrompts `json:"community_prompts,omitempty"`
	ServicePrompts []ServicePrompts `json:"service_prompts,omitempty"`
	SurveyPrompts []SurveyPrompts `json:"survey_prompts,omitempty"`
}

// NewPatchedKnowledgebase instantiates a new PatchedKnowledgebase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedKnowledgebase() *PatchedKnowledgebase {
	this := PatchedKnowledgebase{}
	return &this
}

// NewPatchedKnowledgebaseWithDefaults instantiates a new PatchedKnowledgebase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedKnowledgebaseWithDefaults() *PatchedKnowledgebase {
	this := PatchedKnowledgebase{}
	return &this
}

// GetKnowledgebaseId returns the KnowledgebaseId field value if set, zero value otherwise.
func (o *PatchedKnowledgebase) GetKnowledgebaseId() int32 {
	if o == nil || IsNil(o.KnowledgebaseId) {
		var ret int32
		return ret
	}
	return *o.KnowledgebaseId
}

// GetKnowledgebaseIdOk returns a tuple with the KnowledgebaseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedKnowledgebase) GetKnowledgebaseIdOk() (*int32, bool) {
	if o == nil || IsNil(o.KnowledgebaseId) {
		return nil, false
	}
	return o.KnowledgebaseId, true
}

// HasKnowledgebaseId returns a boolean if a field has been set.
func (o *PatchedKnowledgebase) HasKnowledgebaseId() bool {
	if o != nil && !IsNil(o.KnowledgebaseId) {
		return true
	}

	return false
}

// SetKnowledgebaseId gets a reference to the given int32 and assigns it to the KnowledgebaseId field.
func (o *PatchedKnowledgebase) SetKnowledgebaseId(v int32) {
	o.KnowledgebaseId = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *PatchedKnowledgebase) GetTenantId() int32 {
	if o == nil || IsNil(o.TenantId) {
		var ret int32
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedKnowledgebase) GetTenantIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *PatchedKnowledgebase) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given int32 and assigns it to the TenantId field.
func (o *PatchedKnowledgebase) SetTenantId(v int32) {
	o.TenantId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedKnowledgebase) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedKnowledgebase) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedKnowledgebase) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedKnowledgebase) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedKnowledgebase) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedKnowledgebase) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *PatchedKnowledgebase) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *PatchedKnowledgebase) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *PatchedKnowledgebase) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *PatchedKnowledgebase) UnsetDescription() {
	o.Description.Unset()
}

// GetTypeOfDatasource returns the TypeOfDatasource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedKnowledgebase) GetTypeOfDatasource() string {
	if o == nil || IsNil(o.TypeOfDatasource.Get()) {
		var ret string
		return ret
	}
	return *o.TypeOfDatasource.Get()
}

// GetTypeOfDatasourceOk returns a tuple with the TypeOfDatasource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedKnowledgebase) GetTypeOfDatasourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TypeOfDatasource.Get(), o.TypeOfDatasource.IsSet()
}

// HasTypeOfDatasource returns a boolean if a field has been set.
func (o *PatchedKnowledgebase) HasTypeOfDatasource() bool {
	if o != nil && o.TypeOfDatasource.IsSet() {
		return true
	}

	return false
}

// SetTypeOfDatasource gets a reference to the given NullableString and assigns it to the TypeOfDatasource field.
func (o *PatchedKnowledgebase) SetTypeOfDatasource(v string) {
	o.TypeOfDatasource.Set(&v)
}
// SetTypeOfDatasourceNil sets the value for TypeOfDatasource to be an explicit nil
func (o *PatchedKnowledgebase) SetTypeOfDatasourceNil() {
	o.TypeOfDatasource.Set(nil)
}

// UnsetTypeOfDatasource ensures that no value is present for TypeOfDatasource, not even an explicit nil
func (o *PatchedKnowledgebase) UnsetTypeOfDatasource() {
	o.TypeOfDatasource.Unset()
}

// GetDatasourceTarget returns the DatasourceTarget field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedKnowledgebase) GetDatasourceTarget() string {
	if o == nil || IsNil(o.DatasourceTarget.Get()) {
		var ret string
		return ret
	}
	return *o.DatasourceTarget.Get()
}

// GetDatasourceTargetOk returns a tuple with the DatasourceTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedKnowledgebase) GetDatasourceTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatasourceTarget.Get(), o.DatasourceTarget.IsSet()
}

// HasDatasourceTarget returns a boolean if a field has been set.
func (o *PatchedKnowledgebase) HasDatasourceTarget() bool {
	if o != nil && o.DatasourceTarget.IsSet() {
		return true
	}

	return false
}

// SetDatasourceTarget gets a reference to the given NullableString and assigns it to the DatasourceTarget field.
func (o *PatchedKnowledgebase) SetDatasourceTarget(v string) {
	o.DatasourceTarget.Set(&v)
}
// SetDatasourceTargetNil sets the value for DatasourceTarget to be an explicit nil
func (o *PatchedKnowledgebase) SetDatasourceTargetNil() {
	o.DatasourceTarget.Set(nil)
}

// UnsetDatasourceTarget ensures that no value is present for DatasourceTarget, not even an explicit nil
func (o *PatchedKnowledgebase) UnsetDatasourceTarget() {
	o.DatasourceTarget.Unset()
}

// GetChatPrompts returns the ChatPrompts field value if set, zero value otherwise.
func (o *PatchedKnowledgebase) GetChatPrompts() []ChatPrompts {
	if o == nil || IsNil(o.ChatPrompts) {
		var ret []ChatPrompts
		return ret
	}
	return o.ChatPrompts
}

// GetChatPromptsOk returns a tuple with the ChatPrompts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedKnowledgebase) GetChatPromptsOk() ([]ChatPrompts, bool) {
	if o == nil || IsNil(o.ChatPrompts) {
		return nil, false
	}
	return o.ChatPrompts, true
}

// HasChatPrompts returns a boolean if a field has been set.
func (o *PatchedKnowledgebase) HasChatPrompts() bool {
	if o != nil && !IsNil(o.ChatPrompts) {
		return true
	}

	return false
}

// SetChatPrompts gets a reference to the given []ChatPrompts and assigns it to the ChatPrompts field.
func (o *PatchedKnowledgebase) SetChatPrompts(v []ChatPrompts) {
	o.ChatPrompts = v
}

// GetCommunityPrompts returns the CommunityPrompts field value if set, zero value otherwise.
func (o *PatchedKnowledgebase) GetCommunityPrompts() []CommunityPrompts {
	if o == nil || IsNil(o.CommunityPrompts) {
		var ret []CommunityPrompts
		return ret
	}
	return o.CommunityPrompts
}

// GetCommunityPromptsOk returns a tuple with the CommunityPrompts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedKnowledgebase) GetCommunityPromptsOk() ([]CommunityPrompts, bool) {
	if o == nil || IsNil(o.CommunityPrompts) {
		return nil, false
	}
	return o.CommunityPrompts, true
}

// HasCommunityPrompts returns a boolean if a field has been set.
func (o *PatchedKnowledgebase) HasCommunityPrompts() bool {
	if o != nil && !IsNil(o.CommunityPrompts) {
		return true
	}

	return false
}

// SetCommunityPrompts gets a reference to the given []CommunityPrompts and assigns it to the CommunityPrompts field.
func (o *PatchedKnowledgebase) SetCommunityPrompts(v []CommunityPrompts) {
	o.CommunityPrompts = v
}

// GetServicePrompts returns the ServicePrompts field value if set, zero value otherwise.
func (o *PatchedKnowledgebase) GetServicePrompts() []ServicePrompts {
	if o == nil || IsNil(o.ServicePrompts) {
		var ret []ServicePrompts
		return ret
	}
	return o.ServicePrompts
}

// GetServicePromptsOk returns a tuple with the ServicePrompts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedKnowledgebase) GetServicePromptsOk() ([]ServicePrompts, bool) {
	if o == nil || IsNil(o.ServicePrompts) {
		return nil, false
	}
	return o.ServicePrompts, true
}

// HasServicePrompts returns a boolean if a field has been set.
func (o *PatchedKnowledgebase) HasServicePrompts() bool {
	if o != nil && !IsNil(o.ServicePrompts) {
		return true
	}

	return false
}

// SetServicePrompts gets a reference to the given []ServicePrompts and assigns it to the ServicePrompts field.
func (o *PatchedKnowledgebase) SetServicePrompts(v []ServicePrompts) {
	o.ServicePrompts = v
}

// GetSurveyPrompts returns the SurveyPrompts field value if set, zero value otherwise.
func (o *PatchedKnowledgebase) GetSurveyPrompts() []SurveyPrompts {
	if o == nil || IsNil(o.SurveyPrompts) {
		var ret []SurveyPrompts
		return ret
	}
	return o.SurveyPrompts
}

// GetSurveyPromptsOk returns a tuple with the SurveyPrompts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedKnowledgebase) GetSurveyPromptsOk() ([]SurveyPrompts, bool) {
	if o == nil || IsNil(o.SurveyPrompts) {
		return nil, false
	}
	return o.SurveyPrompts, true
}

// HasSurveyPrompts returns a boolean if a field has been set.
func (o *PatchedKnowledgebase) HasSurveyPrompts() bool {
	if o != nil && !IsNil(o.SurveyPrompts) {
		return true
	}

	return false
}

// SetSurveyPrompts gets a reference to the given []SurveyPrompts and assigns it to the SurveyPrompts field.
func (o *PatchedKnowledgebase) SetSurveyPrompts(v []SurveyPrompts) {
	o.SurveyPrompts = v
}

func (o PatchedKnowledgebase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedKnowledgebase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KnowledgebaseId) {
		toSerialize["knowledgebase_id"] = o.KnowledgebaseId
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenant_id"] = o.TenantId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.TypeOfDatasource.IsSet() {
		toSerialize["type_of_datasource"] = o.TypeOfDatasource.Get()
	}
	if o.DatasourceTarget.IsSet() {
		toSerialize["datasource_target"] = o.DatasourceTarget.Get()
	}
	if !IsNil(o.ChatPrompts) {
		toSerialize["chat_prompts"] = o.ChatPrompts
	}
	if !IsNil(o.CommunityPrompts) {
		toSerialize["community_prompts"] = o.CommunityPrompts
	}
	if !IsNil(o.ServicePrompts) {
		toSerialize["service_prompts"] = o.ServicePrompts
	}
	if !IsNil(o.SurveyPrompts) {
		toSerialize["survey_prompts"] = o.SurveyPrompts
	}
	return toSerialize, nil
}

type NullablePatchedKnowledgebase struct {
	value *PatchedKnowledgebase
	isSet bool
}

func (v NullablePatchedKnowledgebase) Get() *PatchedKnowledgebase {
	return v.value
}

func (v *NullablePatchedKnowledgebase) Set(val *PatchedKnowledgebase) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedKnowledgebase) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedKnowledgebase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedKnowledgebase(val *PatchedKnowledgebase) *NullablePatchedKnowledgebase {
	return &NullablePatchedKnowledgebase{value: val, isSet: true}
}

func (v NullablePatchedKnowledgebase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedKnowledgebase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


