/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CompanyTypeTypeEnum * `small` - Small Company * `large` - Large Company * `enterprise` - Enterprise
type CompanyTypeTypeEnum string

// List of CompanyTypeTypeEnum
const (
	SMALL CompanyTypeTypeEnum = "small"
	LARGE CompanyTypeTypeEnum = "large"
	ENTERPRISE CompanyTypeTypeEnum = "enterprise"
)

// All allowed values of CompanyTypeTypeEnum enum
var AllowedCompanyTypeTypeEnumEnumValues = []CompanyTypeTypeEnum{
	"small",
	"large",
	"enterprise",
}

func (v *CompanyTypeTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CompanyTypeTypeEnum(value)
	for _, existing := range AllowedCompanyTypeTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CompanyTypeTypeEnum", value)
}

// NewCompanyTypeTypeEnumFromValue returns a pointer to a valid CompanyTypeTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCompanyTypeTypeEnumFromValue(v string) (*CompanyTypeTypeEnum, error) {
	ev := CompanyTypeTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CompanyTypeTypeEnum: valid values are %v", v, AllowedCompanyTypeTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CompanyTypeTypeEnum) IsValid() bool {
	for _, existing := range AllowedCompanyTypeTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CompanyTypeTypeEnum value
func (v CompanyTypeTypeEnum) Ptr() *CompanyTypeTypeEnum {
	return &v
}

type NullableCompanyTypeTypeEnum struct {
	value *CompanyTypeTypeEnum
	isSet bool
}

func (v NullableCompanyTypeTypeEnum) Get() *CompanyTypeTypeEnum {
	return v.value
}

func (v *NullableCompanyTypeTypeEnum) Set(val *CompanyTypeTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyTypeTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyTypeTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyTypeTypeEnum(val *CompanyTypeTypeEnum) *NullableCompanyTypeTypeEnum {
	return &NullableCompanyTypeTypeEnum{value: val, isSet: true}
}

func (v NullableCompanyTypeTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyTypeTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

