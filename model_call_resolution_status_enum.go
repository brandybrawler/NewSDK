/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CallResolutionStatusEnum * `RESOLVED` - Resolved * `PENDING` - Pending * `FOLLOW_UP` - Follow Up Required
type CallResolutionStatusEnum string

// List of CallResolutionStatusEnum
const (
	RESOLVED CallResolutionStatusEnum = "RESOLVED"
	PENDING CallResolutionStatusEnum = "PENDING"
	FOLLOW_UP CallResolutionStatusEnum = "FOLLOW_UP"
)

// All allowed values of CallResolutionStatusEnum enum
var AllowedCallResolutionStatusEnumEnumValues = []CallResolutionStatusEnum{
	"RESOLVED",
	"PENDING",
	"FOLLOW_UP",
}

func (v *CallResolutionStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CallResolutionStatusEnum(value)
	for _, existing := range AllowedCallResolutionStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CallResolutionStatusEnum", value)
}

// NewCallResolutionStatusEnumFromValue returns a pointer to a valid CallResolutionStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCallResolutionStatusEnumFromValue(v string) (*CallResolutionStatusEnum, error) {
	ev := CallResolutionStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CallResolutionStatusEnum: valid values are %v", v, AllowedCallResolutionStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CallResolutionStatusEnum) IsValid() bool {
	for _, existing := range AllowedCallResolutionStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CallResolutionStatusEnum value
func (v CallResolutionStatusEnum) Ptr() *CallResolutionStatusEnum {
	return &v
}

type NullableCallResolutionStatusEnum struct {
	value *CallResolutionStatusEnum
	isSet bool
}

func (v NullableCallResolutionStatusEnum) Get() *CallResolutionStatusEnum {
	return v.value
}

func (v *NullableCallResolutionStatusEnum) Set(val *CallResolutionStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCallResolutionStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCallResolutionStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallResolutionStatusEnum(val *CallResolutionStatusEnum) *NullableCallResolutionStatusEnum {
	return &NullableCallResolutionStatusEnum{value: val, isSet: true}
}

func (v NullableCallResolutionStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallResolutionStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

