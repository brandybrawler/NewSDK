/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// SocialintergrationsAPIService SocialintergrationsAPI service
type SocialintergrationsAPIService service

type ApiSocialintergrationsFacebookintergrationCreateRequest struct {
	ctx context.Context
	ApiService *SocialintergrationsAPIService
}

func (r ApiSocialintergrationsFacebookintergrationCreateRequest) Execute() (*http.Response, error) {
	return r.ApiService.SocialintergrationsFacebookintergrationCreateExecute(r)
}

/*
SocialintergrationsFacebookintergrationCreate Method for SocialintergrationsFacebookintergrationCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSocialintergrationsFacebookintergrationCreateRequest
*/
func (a *SocialintergrationsAPIService) SocialintergrationsFacebookintergrationCreate(ctx context.Context) ApiSocialintergrationsFacebookintergrationCreateRequest {
	return ApiSocialintergrationsFacebookintergrationCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SocialintergrationsAPIService) SocialintergrationsFacebookintergrationCreateExecute(r ApiSocialintergrationsFacebookintergrationCreateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialintergrationsAPIService.SocialintergrationsFacebookintergrationCreate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/socialintergrations/facebookintergration/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSocialintergrationsFacebookintergrationRetrieveRequest struct {
	ctx context.Context
	ApiService *SocialintergrationsAPIService
}

func (r ApiSocialintergrationsFacebookintergrationRetrieveRequest) Execute() (*http.Response, error) {
	return r.ApiService.SocialintergrationsFacebookintergrationRetrieveExecute(r)
}

/*
SocialintergrationsFacebookintergrationRetrieve Method for SocialintergrationsFacebookintergrationRetrieve

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSocialintergrationsFacebookintergrationRetrieveRequest
*/
func (a *SocialintergrationsAPIService) SocialintergrationsFacebookintergrationRetrieve(ctx context.Context) ApiSocialintergrationsFacebookintergrationRetrieveRequest {
	return ApiSocialintergrationsFacebookintergrationRetrieveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SocialintergrationsAPIService) SocialintergrationsFacebookintergrationRetrieveExecute(r ApiSocialintergrationsFacebookintergrationRetrieveRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialintergrationsAPIService.SocialintergrationsFacebookintergrationRetrieve")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/socialintergrations/facebookintergration/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSocialintergrationsInstagramintergrationCreateRequest struct {
	ctx context.Context
	ApiService *SocialintergrationsAPIService
}

func (r ApiSocialintergrationsInstagramintergrationCreateRequest) Execute() (*http.Response, error) {
	return r.ApiService.SocialintergrationsInstagramintergrationCreateExecute(r)
}

/*
SocialintergrationsInstagramintergrationCreate Method for SocialintergrationsInstagramintergrationCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSocialintergrationsInstagramintergrationCreateRequest
*/
func (a *SocialintergrationsAPIService) SocialintergrationsInstagramintergrationCreate(ctx context.Context) ApiSocialintergrationsInstagramintergrationCreateRequest {
	return ApiSocialintergrationsInstagramintergrationCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SocialintergrationsAPIService) SocialintergrationsInstagramintergrationCreateExecute(r ApiSocialintergrationsInstagramintergrationCreateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialintergrationsAPIService.SocialintergrationsInstagramintergrationCreate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/socialintergrations/instagramintergration/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSocialintergrationsInstagramintergrationRetrieveRequest struct {
	ctx context.Context
	ApiService *SocialintergrationsAPIService
}

func (r ApiSocialintergrationsInstagramintergrationRetrieveRequest) Execute() (*http.Response, error) {
	return r.ApiService.SocialintergrationsInstagramintergrationRetrieveExecute(r)
}

/*
SocialintergrationsInstagramintergrationRetrieve Method for SocialintergrationsInstagramintergrationRetrieve

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSocialintergrationsInstagramintergrationRetrieveRequest
*/
func (a *SocialintergrationsAPIService) SocialintergrationsInstagramintergrationRetrieve(ctx context.Context) ApiSocialintergrationsInstagramintergrationRetrieveRequest {
	return ApiSocialintergrationsInstagramintergrationRetrieveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SocialintergrationsAPIService) SocialintergrationsInstagramintergrationRetrieveExecute(r ApiSocialintergrationsInstagramintergrationRetrieveRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialintergrationsAPIService.SocialintergrationsInstagramintergrationRetrieve")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/socialintergrations/instagramintergration/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSocialintergrationsProximawhatsappintergrationCreateRequest struct {
	ctx context.Context
	ApiService *SocialintergrationsAPIService
}

func (r ApiSocialintergrationsProximawhatsappintergrationCreateRequest) Execute() (*http.Response, error) {
	return r.ApiService.SocialintergrationsProximawhatsappintergrationCreateExecute(r)
}

/*
SocialintergrationsProximawhatsappintergrationCreate Method for SocialintergrationsProximawhatsappintergrationCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSocialintergrationsProximawhatsappintergrationCreateRequest
*/
func (a *SocialintergrationsAPIService) SocialintergrationsProximawhatsappintergrationCreate(ctx context.Context) ApiSocialintergrationsProximawhatsappintergrationCreateRequest {
	return ApiSocialintergrationsProximawhatsappintergrationCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SocialintergrationsAPIService) SocialintergrationsProximawhatsappintergrationCreateExecute(r ApiSocialintergrationsProximawhatsappintergrationCreateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialintergrationsAPIService.SocialintergrationsProximawhatsappintergrationCreate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/socialintergrations/proximawhatsappintergration/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSocialintergrationsProximawhatsappintergrationRetrieveRequest struct {
	ctx context.Context
	ApiService *SocialintergrationsAPIService
}

func (r ApiSocialintergrationsProximawhatsappintergrationRetrieveRequest) Execute() (*http.Response, error) {
	return r.ApiService.SocialintergrationsProximawhatsappintergrationRetrieveExecute(r)
}

/*
SocialintergrationsProximawhatsappintergrationRetrieve Method for SocialintergrationsProximawhatsappintergrationRetrieve

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSocialintergrationsProximawhatsappintergrationRetrieveRequest
*/
func (a *SocialintergrationsAPIService) SocialintergrationsProximawhatsappintergrationRetrieve(ctx context.Context) ApiSocialintergrationsProximawhatsappintergrationRetrieveRequest {
	return ApiSocialintergrationsProximawhatsappintergrationRetrieveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SocialintergrationsAPIService) SocialintergrationsProximawhatsappintergrationRetrieveExecute(r ApiSocialintergrationsProximawhatsappintergrationRetrieveRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialintergrationsAPIService.SocialintergrationsProximawhatsappintergrationRetrieve")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/socialintergrations/proximawhatsappintergration/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSocialintergrationsSavefacebookintergrationCreateRequest struct {
	ctx context.Context
	ApiService *SocialintergrationsAPIService
}

func (r ApiSocialintergrationsSavefacebookintergrationCreateRequest) Execute() (*http.Response, error) {
	return r.ApiService.SocialintergrationsSavefacebookintergrationCreateExecute(r)
}

/*
SocialintergrationsSavefacebookintergrationCreate Method for SocialintergrationsSavefacebookintergrationCreate

POST
facebook_intergration_id
tenant_id
api_token

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSocialintergrationsSavefacebookintergrationCreateRequest
*/
func (a *SocialintergrationsAPIService) SocialintergrationsSavefacebookintergrationCreate(ctx context.Context) ApiSocialintergrationsSavefacebookintergrationCreateRequest {
	return ApiSocialintergrationsSavefacebookintergrationCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SocialintergrationsAPIService) SocialintergrationsSavefacebookintergrationCreateExecute(r ApiSocialintergrationsSavefacebookintergrationCreateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialintergrationsAPIService.SocialintergrationsSavefacebookintergrationCreate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/socialintergrations/savefacebookintergration/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSocialintergrationsSavefacebookintergrationRetrieveRequest struct {
	ctx context.Context
	ApiService *SocialintergrationsAPIService
}

func (r ApiSocialintergrationsSavefacebookintergrationRetrieveRequest) Execute() (*http.Response, error) {
	return r.ApiService.SocialintergrationsSavefacebookintergrationRetrieveExecute(r)
}

/*
SocialintergrationsSavefacebookintergrationRetrieve Method for SocialintergrationsSavefacebookintergrationRetrieve

GET
Retrieve Chats matching query.

Params:
facebook_intergration_id
tenant_id
api_token

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSocialintergrationsSavefacebookintergrationRetrieveRequest
*/
func (a *SocialintergrationsAPIService) SocialintergrationsSavefacebookintergrationRetrieve(ctx context.Context) ApiSocialintergrationsSavefacebookintergrationRetrieveRequest {
	return ApiSocialintergrationsSavefacebookintergrationRetrieveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SocialintergrationsAPIService) SocialintergrationsSavefacebookintergrationRetrieveExecute(r ApiSocialintergrationsSavefacebookintergrationRetrieveRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialintergrationsAPIService.SocialintergrationsSavefacebookintergrationRetrieve")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/socialintergrations/savefacebookintergration/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSocialintergrationsSavefacebookintergrationUpdateRequest struct {
	ctx context.Context
	ApiService *SocialintergrationsAPIService
}

func (r ApiSocialintergrationsSavefacebookintergrationUpdateRequest) Execute() (*http.Response, error) {
	return r.ApiService.SocialintergrationsSavefacebookintergrationUpdateExecute(r)
}

/*
SocialintergrationsSavefacebookintergrationUpdate Method for SocialintergrationsSavefacebookintergrationUpdate

PUT
Update facebook Integration

Params:
tenant_id
... (other update parameters)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSocialintergrationsSavefacebookintergrationUpdateRequest
*/
func (a *SocialintergrationsAPIService) SocialintergrationsSavefacebookintergrationUpdate(ctx context.Context) ApiSocialintergrationsSavefacebookintergrationUpdateRequest {
	return ApiSocialintergrationsSavefacebookintergrationUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SocialintergrationsAPIService) SocialintergrationsSavefacebookintergrationUpdateExecute(r ApiSocialintergrationsSavefacebookintergrationUpdateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialintergrationsAPIService.SocialintergrationsSavefacebookintergrationUpdate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/socialintergrations/savefacebookintergration/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSocialintergrationsSaveinstagramintergrationCreateRequest struct {
	ctx context.Context
	ApiService *SocialintergrationsAPIService
}

func (r ApiSocialintergrationsSaveinstagramintergrationCreateRequest) Execute() (*http.Response, error) {
	return r.ApiService.SocialintergrationsSaveinstagramintergrationCreateExecute(r)
}

/*
SocialintergrationsSaveinstagramintergrationCreate Method for SocialintergrationsSaveinstagramintergrationCreate

POST
instagram_intergration_id
tenant_id
api_token

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSocialintergrationsSaveinstagramintergrationCreateRequest
*/
func (a *SocialintergrationsAPIService) SocialintergrationsSaveinstagramintergrationCreate(ctx context.Context) ApiSocialintergrationsSaveinstagramintergrationCreateRequest {
	return ApiSocialintergrationsSaveinstagramintergrationCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SocialintergrationsAPIService) SocialintergrationsSaveinstagramintergrationCreateExecute(r ApiSocialintergrationsSaveinstagramintergrationCreateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialintergrationsAPIService.SocialintergrationsSaveinstagramintergrationCreate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/socialintergrations/saveinstagramintergration/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSocialintergrationsSaveinstagramintergrationRetrieveRequest struct {
	ctx context.Context
	ApiService *SocialintergrationsAPIService
}

func (r ApiSocialintergrationsSaveinstagramintergrationRetrieveRequest) Execute() (*http.Response, error) {
	return r.ApiService.SocialintergrationsSaveinstagramintergrationRetrieveExecute(r)
}

/*
SocialintergrationsSaveinstagramintergrationRetrieve Method for SocialintergrationsSaveinstagramintergrationRetrieve

GET
Retrieve Chats matching query.

Params:
instagram_intergration_id
tenant_id
api_token

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSocialintergrationsSaveinstagramintergrationRetrieveRequest
*/
func (a *SocialintergrationsAPIService) SocialintergrationsSaveinstagramintergrationRetrieve(ctx context.Context) ApiSocialintergrationsSaveinstagramintergrationRetrieveRequest {
	return ApiSocialintergrationsSaveinstagramintergrationRetrieveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SocialintergrationsAPIService) SocialintergrationsSaveinstagramintergrationRetrieveExecute(r ApiSocialintergrationsSaveinstagramintergrationRetrieveRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialintergrationsAPIService.SocialintergrationsSaveinstagramintergrationRetrieve")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/socialintergrations/saveinstagramintergration/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSocialintergrationsSaveinstagramintergrationUpdateRequest struct {
	ctx context.Context
	ApiService *SocialintergrationsAPIService
}

func (r ApiSocialintergrationsSaveinstagramintergrationUpdateRequest) Execute() (*http.Response, error) {
	return r.ApiService.SocialintergrationsSaveinstagramintergrationUpdateExecute(r)
}

/*
SocialintergrationsSaveinstagramintergrationUpdate Method for SocialintergrationsSaveinstagramintergrationUpdate

PUT
Update Instagram Integration

Params:
tenant_id
... (other update parameters)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSocialintergrationsSaveinstagramintergrationUpdateRequest
*/
func (a *SocialintergrationsAPIService) SocialintergrationsSaveinstagramintergrationUpdate(ctx context.Context) ApiSocialintergrationsSaveinstagramintergrationUpdateRequest {
	return ApiSocialintergrationsSaveinstagramintergrationUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SocialintergrationsAPIService) SocialintergrationsSaveinstagramintergrationUpdateExecute(r ApiSocialintergrationsSaveinstagramintergrationUpdateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialintergrationsAPIService.SocialintergrationsSaveinstagramintergrationUpdate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/socialintergrations/saveinstagramintergration/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSocialintergrationsSavewhatsappintergrationCreateRequest struct {
	ctx context.Context
	ApiService *SocialintergrationsAPIService
}

func (r ApiSocialintergrationsSavewhatsappintergrationCreateRequest) Execute() (*http.Response, error) {
	return r.ApiService.SocialintergrationsSavewhatsappintergrationCreateExecute(r)
}

/*
SocialintergrationsSavewhatsappintergrationCreate Method for SocialintergrationsSavewhatsappintergrationCreate

POST
whatsapp_intergration_id
tenant_id
api_token

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSocialintergrationsSavewhatsappintergrationCreateRequest
*/
func (a *SocialintergrationsAPIService) SocialintergrationsSavewhatsappintergrationCreate(ctx context.Context) ApiSocialintergrationsSavewhatsappintergrationCreateRequest {
	return ApiSocialintergrationsSavewhatsappintergrationCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SocialintergrationsAPIService) SocialintergrationsSavewhatsappintergrationCreateExecute(r ApiSocialintergrationsSavewhatsappintergrationCreateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialintergrationsAPIService.SocialintergrationsSavewhatsappintergrationCreate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/socialintergrations/savewhatsappintergration/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSocialintergrationsSavewhatsappintergrationRetrieveRequest struct {
	ctx context.Context
	ApiService *SocialintergrationsAPIService
}

func (r ApiSocialintergrationsSavewhatsappintergrationRetrieveRequest) Execute() (*http.Response, error) {
	return r.ApiService.SocialintergrationsSavewhatsappintergrationRetrieveExecute(r)
}

/*
SocialintergrationsSavewhatsappintergrationRetrieve Method for SocialintergrationsSavewhatsappintergrationRetrieve

GET
Retrieve Chats matching query.

Params:
whatsapp_intergration_id
tenant_id
api_token
bsn_number

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSocialintergrationsSavewhatsappintergrationRetrieveRequest
*/
func (a *SocialintergrationsAPIService) SocialintergrationsSavewhatsappintergrationRetrieve(ctx context.Context) ApiSocialintergrationsSavewhatsappintergrationRetrieveRequest {
	return ApiSocialintergrationsSavewhatsappintergrationRetrieveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SocialintergrationsAPIService) SocialintergrationsSavewhatsappintergrationRetrieveExecute(r ApiSocialintergrationsSavewhatsappintergrationRetrieveRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialintergrationsAPIService.SocialintergrationsSavewhatsappintergrationRetrieve")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/socialintergrations/savewhatsappintergration/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSocialintergrationsSavewhatsappintergrationUpdateRequest struct {
	ctx context.Context
	ApiService *SocialintergrationsAPIService
}

func (r ApiSocialintergrationsSavewhatsappintergrationUpdateRequest) Execute() (*http.Response, error) {
	return r.ApiService.SocialintergrationsSavewhatsappintergrationUpdateExecute(r)
}

/*
SocialintergrationsSavewhatsappintergrationUpdate Method for SocialintergrationsSavewhatsappintergrationUpdate

PUT
Update WhatsApp Integration

Params:
tenant_id
... (other update parameters)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSocialintergrationsSavewhatsappintergrationUpdateRequest
*/
func (a *SocialintergrationsAPIService) SocialintergrationsSavewhatsappintergrationUpdate(ctx context.Context) ApiSocialintergrationsSavewhatsappintergrationUpdateRequest {
	return ApiSocialintergrationsSavewhatsappintergrationUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SocialintergrationsAPIService) SocialintergrationsSavewhatsappintergrationUpdateExecute(r ApiSocialintergrationsSavewhatsappintergrationUpdateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialintergrationsAPIService.SocialintergrationsSavewhatsappintergrationUpdate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/socialintergrations/savewhatsappintergration/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSocialintergrationsWhatsappintergrationCreateRequest struct {
	ctx context.Context
	ApiService *SocialintergrationsAPIService
}

func (r ApiSocialintergrationsWhatsappintergrationCreateRequest) Execute() (*http.Response, error) {
	return r.ApiService.SocialintergrationsWhatsappintergrationCreateExecute(r)
}

/*
SocialintergrationsWhatsappintergrationCreate Method for SocialintergrationsWhatsappintergrationCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSocialintergrationsWhatsappintergrationCreateRequest
*/
func (a *SocialintergrationsAPIService) SocialintergrationsWhatsappintergrationCreate(ctx context.Context) ApiSocialintergrationsWhatsappintergrationCreateRequest {
	return ApiSocialintergrationsWhatsappintergrationCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SocialintergrationsAPIService) SocialintergrationsWhatsappintergrationCreateExecute(r ApiSocialintergrationsWhatsappintergrationCreateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialintergrationsAPIService.SocialintergrationsWhatsappintergrationCreate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/socialintergrations/whatsappintergration/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSocialintergrationsWhatsappintergrationRetrieveRequest struct {
	ctx context.Context
	ApiService *SocialintergrationsAPIService
}

func (r ApiSocialintergrationsWhatsappintergrationRetrieveRequest) Execute() (*http.Response, error) {
	return r.ApiService.SocialintergrationsWhatsappintergrationRetrieveExecute(r)
}

/*
SocialintergrationsWhatsappintergrationRetrieve Method for SocialintergrationsWhatsappintergrationRetrieve

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSocialintergrationsWhatsappintergrationRetrieveRequest
*/
func (a *SocialintergrationsAPIService) SocialintergrationsWhatsappintergrationRetrieve(ctx context.Context) ApiSocialintergrationsWhatsappintergrationRetrieveRequest {
	return ApiSocialintergrationsWhatsappintergrationRetrieveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SocialintergrationsAPIService) SocialintergrationsWhatsappintergrationRetrieveExecute(r ApiSocialintergrationsWhatsappintergrationRetrieveRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialintergrationsAPIService.SocialintergrationsWhatsappintergrationRetrieve")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/socialintergrations/whatsappintergration/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
