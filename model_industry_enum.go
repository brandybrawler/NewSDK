/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// IndustryEnum * `IT` - Information Technology * `Finance` - Finance * `Healthcare` - Healthcare * `Education` - Education * `Retail` - Retail * `Manufacturing` - Manufacturing * `Automotive` - Automotive * `Hospitality` - Hospitality * `RealEstate` - Real Estate * `Media` - Media * `Telecommunications` - Telecommunications * `Energy` - Energy * `Transportation` - Transportation * `Agriculture` - Agriculture
type IndustryEnum string

// List of IndustryEnum
const (
	IT IndustryEnum = "IT"
	FINANCE IndustryEnum = "Finance"
	HEALTHCARE IndustryEnum = "Healthcare"
	EDUCATION IndustryEnum = "Education"
	RETAIL IndustryEnum = "Retail"
	MANUFACTURING IndustryEnum = "Manufacturing"
	AUTOMOTIVE IndustryEnum = "Automotive"
	HOSPITALITY IndustryEnum = "Hospitality"
	REAL_ESTATE IndustryEnum = "RealEstate"
	MEDIA IndustryEnum = "Media"
	TELECOMMUNICATIONS IndustryEnum = "Telecommunications"
	ENERGY IndustryEnum = "Energy"
	TRANSPORTATION IndustryEnum = "Transportation"
	AGRICULTURE IndustryEnum = "Agriculture"
)

// All allowed values of IndustryEnum enum
var AllowedIndustryEnumEnumValues = []IndustryEnum{
	"IT",
	"Finance",
	"Healthcare",
	"Education",
	"Retail",
	"Manufacturing",
	"Automotive",
	"Hospitality",
	"RealEstate",
	"Media",
	"Telecommunications",
	"Energy",
	"Transportation",
	"Agriculture",
}

func (v *IndustryEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IndustryEnum(value)
	for _, existing := range AllowedIndustryEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IndustryEnum", value)
}

// NewIndustryEnumFromValue returns a pointer to a valid IndustryEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIndustryEnumFromValue(v string) (*IndustryEnum, error) {
	ev := IndustryEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IndustryEnum: valid values are %v", v, AllowedIndustryEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IndustryEnum) IsValid() bool {
	for _, existing := range AllowedIndustryEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IndustryEnum value
func (v IndustryEnum) Ptr() *IndustryEnum {
	return &v
}

type NullableIndustryEnum struct {
	value *IndustryEnum
	isSet bool
}

func (v NullableIndustryEnum) Get() *IndustryEnum {
	return v.value
}

func (v *NullableIndustryEnum) Set(val *IndustryEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableIndustryEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableIndustryEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndustryEnum(val *IndustryEnum) *NullableIndustryEnum {
	return &NullableIndustryEnum{value: val, isSet: true}
}

func (v NullableIndustryEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndustryEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

