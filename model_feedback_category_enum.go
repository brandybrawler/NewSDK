/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FeedbackCategoryEnum * `SERVICE` - Service * `TECHNICAL` - Technical Issue * `GENERAL` - General Feedback
type FeedbackCategoryEnum string

// List of FeedbackCategoryEnum
const (
	SERVICE FeedbackCategoryEnum = "SERVICE"
	TECHNICAL FeedbackCategoryEnum = "TECHNICAL"
	GENERAL FeedbackCategoryEnum = "GENERAL"
)

// All allowed values of FeedbackCategoryEnum enum
var AllowedFeedbackCategoryEnumEnumValues = []FeedbackCategoryEnum{
	"SERVICE",
	"TECHNICAL",
	"GENERAL",
}

func (v *FeedbackCategoryEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FeedbackCategoryEnum(value)
	for _, existing := range AllowedFeedbackCategoryEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FeedbackCategoryEnum", value)
}

// NewFeedbackCategoryEnumFromValue returns a pointer to a valid FeedbackCategoryEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFeedbackCategoryEnumFromValue(v string) (*FeedbackCategoryEnum, error) {
	ev := FeedbackCategoryEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FeedbackCategoryEnum: valid values are %v", v, AllowedFeedbackCategoryEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FeedbackCategoryEnum) IsValid() bool {
	for _, existing := range AllowedFeedbackCategoryEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FeedbackCategoryEnum value
func (v FeedbackCategoryEnum) Ptr() *FeedbackCategoryEnum {
	return &v
}

type NullableFeedbackCategoryEnum struct {
	value *FeedbackCategoryEnum
	isSet bool
}

func (v NullableFeedbackCategoryEnum) Get() *FeedbackCategoryEnum {
	return v.value
}

func (v *NullableFeedbackCategoryEnum) Set(val *FeedbackCategoryEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedbackCategoryEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedbackCategoryEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedbackCategoryEnum(val *FeedbackCategoryEnum) *NullableFeedbackCategoryEnum {
	return &NullableFeedbackCategoryEnum{value: val, isSet: true}
}

func (v NullableFeedbackCategoryEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedbackCategoryEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

