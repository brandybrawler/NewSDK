/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AnonymousUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnonymousUser{}

// AnonymousUser struct for AnonymousUser
type AnonymousUser struct {
	// The webhookevent chats ID UUID.
	AnonymousUserId int32 `json:"anonymous_user_id"`
	Token string `json:"token"`
	// Email for anonymous users
	Email NullableString `json:"email,omitempty"`
	FullNames NullableString `json:"full_names,omitempty"`
	// Contact related to an anonymous user
	Contact NullableString `json:"contact,omitempty"`
}

type _AnonymousUser AnonymousUser

// NewAnonymousUser instantiates a new AnonymousUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnonymousUser(anonymousUserId int32, token string) *AnonymousUser {
	this := AnonymousUser{}
	this.AnonymousUserId = anonymousUserId
	this.Token = token
	return &this
}

// NewAnonymousUserWithDefaults instantiates a new AnonymousUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnonymousUserWithDefaults() *AnonymousUser {
	this := AnonymousUser{}
	return &this
}

// GetAnonymousUserId returns the AnonymousUserId field value
func (o *AnonymousUser) GetAnonymousUserId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AnonymousUserId
}

// GetAnonymousUserIdOk returns a tuple with the AnonymousUserId field value
// and a boolean to check if the value has been set.
func (o *AnonymousUser) GetAnonymousUserIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AnonymousUserId, true
}

// SetAnonymousUserId sets field value
func (o *AnonymousUser) SetAnonymousUserId(v int32) {
	o.AnonymousUserId = v
}

// GetToken returns the Token field value
func (o *AnonymousUser) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *AnonymousUser) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *AnonymousUser) SetToken(v string) {
	o.Token = v
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AnonymousUser) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AnonymousUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *AnonymousUser) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *AnonymousUser) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *AnonymousUser) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *AnonymousUser) UnsetEmail() {
	o.Email.Unset()
}

// GetFullNames returns the FullNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AnonymousUser) GetFullNames() string {
	if o == nil || IsNil(o.FullNames.Get()) {
		var ret string
		return ret
	}
	return *o.FullNames.Get()
}

// GetFullNamesOk returns a tuple with the FullNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AnonymousUser) GetFullNamesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FullNames.Get(), o.FullNames.IsSet()
}

// HasFullNames returns a boolean if a field has been set.
func (o *AnonymousUser) HasFullNames() bool {
	if o != nil && o.FullNames.IsSet() {
		return true
	}

	return false
}

// SetFullNames gets a reference to the given NullableString and assigns it to the FullNames field.
func (o *AnonymousUser) SetFullNames(v string) {
	o.FullNames.Set(&v)
}
// SetFullNamesNil sets the value for FullNames to be an explicit nil
func (o *AnonymousUser) SetFullNamesNil() {
	o.FullNames.Set(nil)
}

// UnsetFullNames ensures that no value is present for FullNames, not even an explicit nil
func (o *AnonymousUser) UnsetFullNames() {
	o.FullNames.Unset()
}

// GetContact returns the Contact field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AnonymousUser) GetContact() string {
	if o == nil || IsNil(o.Contact.Get()) {
		var ret string
		return ret
	}
	return *o.Contact.Get()
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AnonymousUser) GetContactOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contact.Get(), o.Contact.IsSet()
}

// HasContact returns a boolean if a field has been set.
func (o *AnonymousUser) HasContact() bool {
	if o != nil && o.Contact.IsSet() {
		return true
	}

	return false
}

// SetContact gets a reference to the given NullableString and assigns it to the Contact field.
func (o *AnonymousUser) SetContact(v string) {
	o.Contact.Set(&v)
}
// SetContactNil sets the value for Contact to be an explicit nil
func (o *AnonymousUser) SetContactNil() {
	o.Contact.Set(nil)
}

// UnsetContact ensures that no value is present for Contact, not even an explicit nil
func (o *AnonymousUser) UnsetContact() {
	o.Contact.Unset()
}

func (o AnonymousUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnonymousUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["anonymous_user_id"] = o.AnonymousUserId
	toSerialize["token"] = o.Token
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if o.FullNames.IsSet() {
		toSerialize["full_names"] = o.FullNames.Get()
	}
	if o.Contact.IsSet() {
		toSerialize["contact"] = o.Contact.Get()
	}
	return toSerialize, nil
}

func (o *AnonymousUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"anonymous_user_id",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAnonymousUser := _AnonymousUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAnonymousUser)

	if err != nil {
		return err
	}

	*o = AnonymousUser(varAnonymousUser)

	return err
}

type NullableAnonymousUser struct {
	value *AnonymousUser
	isSet bool
}

func (v NullableAnonymousUser) Get() *AnonymousUser {
	return v.value
}

func (v *NullableAnonymousUser) Set(val *AnonymousUser) {
	v.value = val
	v.isSet = true
}

func (v NullableAnonymousUser) IsSet() bool {
	return v.isSet
}

func (v *NullableAnonymousUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnonymousUser(val *AnonymousUser) *NullableAnonymousUser {
	return &NullableAnonymousUser{value: val, isSet: true}
}

func (v NullableAnonymousUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnonymousUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


