/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Service type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Service{}

// Service struct for Service
type Service struct {
	ServiceId int32 `json:"service_id"`
	// The tenant chats ID.
	TenantId int32 `json:"tenant_id"`
	NameOfService string `json:"name_of_service"`
	ServiceDescription string `json:"service_description"`
	ServiceType int32 `json:"service_type"`
	IsActive *bool `json:"is_active,omitempty"`
	ResolutionPeriod string `json:"resolution_period"`
	ServiceAvailability ServiceAvailabilityEnum `json:"service_availability"`
	AiPowered *bool `json:"ai_powered,omitempty"`
	AiSolved NullableBool `json:"ai_solved,omitempty"`
	Details interface{} `json:"details"`
	ServiceActionPlan interface{} `json:"service_action_plan"`
}

type _Service Service

// NewService instantiates a new Service object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewService(serviceId int32, tenantId int32, nameOfService string, serviceDescription string, serviceType int32, resolutionPeriod string, serviceAvailability ServiceAvailabilityEnum, details interface{}, serviceActionPlan interface{}) *Service {
	this := Service{}
	this.ServiceId = serviceId
	this.TenantId = tenantId
	this.NameOfService = nameOfService
	this.ServiceDescription = serviceDescription
	this.ServiceType = serviceType
	this.ResolutionPeriod = resolutionPeriod
	this.ServiceAvailability = serviceAvailability
	this.Details = details
	this.ServiceActionPlan = serviceActionPlan
	return &this
}

// NewServiceWithDefaults instantiates a new Service object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceWithDefaults() *Service {
	this := Service{}
	return &this
}

// GetServiceId returns the ServiceId field value
func (o *Service) GetServiceId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *Service) GetServiceIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *Service) SetServiceId(v int32) {
	o.ServiceId = v
}

// GetTenantId returns the TenantId field value
func (o *Service) GetTenantId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *Service) GetTenantIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *Service) SetTenantId(v int32) {
	o.TenantId = v
}

// GetNameOfService returns the NameOfService field value
func (o *Service) GetNameOfService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NameOfService
}

// GetNameOfServiceOk returns a tuple with the NameOfService field value
// and a boolean to check if the value has been set.
func (o *Service) GetNameOfServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NameOfService, true
}

// SetNameOfService sets field value
func (o *Service) SetNameOfService(v string) {
	o.NameOfService = v
}

// GetServiceDescription returns the ServiceDescription field value
func (o *Service) GetServiceDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceDescription
}

// GetServiceDescriptionOk returns a tuple with the ServiceDescription field value
// and a boolean to check if the value has been set.
func (o *Service) GetServiceDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceDescription, true
}

// SetServiceDescription sets field value
func (o *Service) SetServiceDescription(v string) {
	o.ServiceDescription = v
}

// GetServiceType returns the ServiceType field value
func (o *Service) GetServiceType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value
// and a boolean to check if the value has been set.
func (o *Service) GetServiceTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceType, true
}

// SetServiceType sets field value
func (o *Service) SetServiceType(v int32) {
	o.ServiceType = v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *Service) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *Service) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *Service) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetResolutionPeriod returns the ResolutionPeriod field value
func (o *Service) GetResolutionPeriod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResolutionPeriod
}

// GetResolutionPeriodOk returns a tuple with the ResolutionPeriod field value
// and a boolean to check if the value has been set.
func (o *Service) GetResolutionPeriodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResolutionPeriod, true
}

// SetResolutionPeriod sets field value
func (o *Service) SetResolutionPeriod(v string) {
	o.ResolutionPeriod = v
}

// GetServiceAvailability returns the ServiceAvailability field value
func (o *Service) GetServiceAvailability() ServiceAvailabilityEnum {
	if o == nil {
		var ret ServiceAvailabilityEnum
		return ret
	}

	return o.ServiceAvailability
}

// GetServiceAvailabilityOk returns a tuple with the ServiceAvailability field value
// and a boolean to check if the value has been set.
func (o *Service) GetServiceAvailabilityOk() (*ServiceAvailabilityEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceAvailability, true
}

// SetServiceAvailability sets field value
func (o *Service) SetServiceAvailability(v ServiceAvailabilityEnum) {
	o.ServiceAvailability = v
}

// GetAiPowered returns the AiPowered field value if set, zero value otherwise.
func (o *Service) GetAiPowered() bool {
	if o == nil || IsNil(o.AiPowered) {
		var ret bool
		return ret
	}
	return *o.AiPowered
}

// GetAiPoweredOk returns a tuple with the AiPowered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetAiPoweredOk() (*bool, bool) {
	if o == nil || IsNil(o.AiPowered) {
		return nil, false
	}
	return o.AiPowered, true
}

// HasAiPowered returns a boolean if a field has been set.
func (o *Service) HasAiPowered() bool {
	if o != nil && !IsNil(o.AiPowered) {
		return true
	}

	return false
}

// SetAiPowered gets a reference to the given bool and assigns it to the AiPowered field.
func (o *Service) SetAiPowered(v bool) {
	o.AiPowered = &v
}

// GetAiSolved returns the AiSolved field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Service) GetAiSolved() bool {
	if o == nil || IsNil(o.AiSolved.Get()) {
		var ret bool
		return ret
	}
	return *o.AiSolved.Get()
}

// GetAiSolvedOk returns a tuple with the AiSolved field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Service) GetAiSolvedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AiSolved.Get(), o.AiSolved.IsSet()
}

// HasAiSolved returns a boolean if a field has been set.
func (o *Service) HasAiSolved() bool {
	if o != nil && o.AiSolved.IsSet() {
		return true
	}

	return false
}

// SetAiSolved gets a reference to the given NullableBool and assigns it to the AiSolved field.
func (o *Service) SetAiSolved(v bool) {
	o.AiSolved.Set(&v)
}
// SetAiSolvedNil sets the value for AiSolved to be an explicit nil
func (o *Service) SetAiSolvedNil() {
	o.AiSolved.Set(nil)
}

// UnsetAiSolved ensures that no value is present for AiSolved, not even an explicit nil
func (o *Service) UnsetAiSolved() {
	o.AiSolved.Unset()
}

// GetDetails returns the Details field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Service) GetDetails() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Service) GetDetailsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return &o.Details, true
}

// SetDetails sets field value
func (o *Service) SetDetails(v interface{}) {
	o.Details = v
}

// GetServiceActionPlan returns the ServiceActionPlan field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Service) GetServiceActionPlan() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.ServiceActionPlan
}

// GetServiceActionPlanOk returns a tuple with the ServiceActionPlan field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Service) GetServiceActionPlanOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ServiceActionPlan) {
		return nil, false
	}
	return &o.ServiceActionPlan, true
}

// SetServiceActionPlan sets field value
func (o *Service) SetServiceActionPlan(v interface{}) {
	o.ServiceActionPlan = v
}

func (o Service) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Service) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["service_id"] = o.ServiceId
	toSerialize["tenant_id"] = o.TenantId
	toSerialize["name_of_service"] = o.NameOfService
	toSerialize["service_description"] = o.ServiceDescription
	toSerialize["service_type"] = o.ServiceType
	if !IsNil(o.IsActive) {
		toSerialize["is_active"] = o.IsActive
	}
	toSerialize["resolution_period"] = o.ResolutionPeriod
	toSerialize["service_availability"] = o.ServiceAvailability
	if !IsNil(o.AiPowered) {
		toSerialize["ai_powered"] = o.AiPowered
	}
	if o.AiSolved.IsSet() {
		toSerialize["ai_solved"] = o.AiSolved.Get()
	}
	if o.Details != nil {
		toSerialize["details"] = o.Details
	}
	if o.ServiceActionPlan != nil {
		toSerialize["service_action_plan"] = o.ServiceActionPlan
	}
	return toSerialize, nil
}

func (o *Service) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"service_id",
		"tenant_id",
		"name_of_service",
		"service_description",
		"service_type",
		"resolution_period",
		"service_availability",
		"details",
		"service_action_plan",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varService := _Service{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varService)

	if err != nil {
		return err
	}

	*o = Service(varService)

	return err
}

type NullableService struct {
	value *Service
	isSet bool
}

func (v NullableService) Get() *Service {
	return v.value
}

func (v *NullableService) Set(val *Service) {
	v.value = val
	v.isSet = true
}

func (v NullableService) IsSet() bool {
	return v.isSet
}

func (v *NullableService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableService(val *Service) *NullableService {
	return &NullableService{value: val, isSet: true}
}

func (v NullableService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


