/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PatchedIssue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedIssue{}

// PatchedIssue struct for PatchedIssue
type PatchedIssue struct {
	// The issue ID UUID .
	IssueId *int32 `json:"issue_id,omitempty"`
	// Display name of the issue that's created
	Issue *string `json:"issue,omitempty"`
	// Description of the issue
	Description *string `json:"description,omitempty"`
	// Was the issue solved or not
	Solved *bool `json:"solved,omitempty"`
	ClientId map[string]interface{} `json:"client_id,omitempty"`
	CommunityId map[string]interface{} `json:"community_id,omitempty"`
	CreatedAt NullableString `json:"created_at,omitempty"`
	// The timestamp of the chat.
	Timestamp NullableTime `json:"timestamp,omitempty"`
	Tags []CommunityTag `json:"tags,omitempty"`
	NumComments *int32 `json:"num_comments,omitempty"`
	NumUniqueUsers *int32 `json:"num_unique_users,omitempty"`
	// Was the issue solved or not
	Visible NullableBool `json:"visible,omitempty"`
}

// NewPatchedIssue instantiates a new PatchedIssue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedIssue() *PatchedIssue {
	this := PatchedIssue{}
	return &this
}

// NewPatchedIssueWithDefaults instantiates a new PatchedIssue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedIssueWithDefaults() *PatchedIssue {
	this := PatchedIssue{}
	return &this
}

// GetIssueId returns the IssueId field value if set, zero value otherwise.
func (o *PatchedIssue) GetIssueId() int32 {
	if o == nil || IsNil(o.IssueId) {
		var ret int32
		return ret
	}
	return *o.IssueId
}

// GetIssueIdOk returns a tuple with the IssueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedIssue) GetIssueIdOk() (*int32, bool) {
	if o == nil || IsNil(o.IssueId) {
		return nil, false
	}
	return o.IssueId, true
}

// HasIssueId returns a boolean if a field has been set.
func (o *PatchedIssue) HasIssueId() bool {
	if o != nil && !IsNil(o.IssueId) {
		return true
	}

	return false
}

// SetIssueId gets a reference to the given int32 and assigns it to the IssueId field.
func (o *PatchedIssue) SetIssueId(v int32) {
	o.IssueId = &v
}

// GetIssue returns the Issue field value if set, zero value otherwise.
func (o *PatchedIssue) GetIssue() string {
	if o == nil || IsNil(o.Issue) {
		var ret string
		return ret
	}
	return *o.Issue
}

// GetIssueOk returns a tuple with the Issue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedIssue) GetIssueOk() (*string, bool) {
	if o == nil || IsNil(o.Issue) {
		return nil, false
	}
	return o.Issue, true
}

// HasIssue returns a boolean if a field has been set.
func (o *PatchedIssue) HasIssue() bool {
	if o != nil && !IsNil(o.Issue) {
		return true
	}

	return false
}

// SetIssue gets a reference to the given string and assigns it to the Issue field.
func (o *PatchedIssue) SetIssue(v string) {
	o.Issue = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PatchedIssue) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedIssue) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PatchedIssue) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PatchedIssue) SetDescription(v string) {
	o.Description = &v
}

// GetSolved returns the Solved field value if set, zero value otherwise.
func (o *PatchedIssue) GetSolved() bool {
	if o == nil || IsNil(o.Solved) {
		var ret bool
		return ret
	}
	return *o.Solved
}

// GetSolvedOk returns a tuple with the Solved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedIssue) GetSolvedOk() (*bool, bool) {
	if o == nil || IsNil(o.Solved) {
		return nil, false
	}
	return o.Solved, true
}

// HasSolved returns a boolean if a field has been set.
func (o *PatchedIssue) HasSolved() bool {
	if o != nil && !IsNil(o.Solved) {
		return true
	}

	return false
}

// SetSolved gets a reference to the given bool and assigns it to the Solved field.
func (o *PatchedIssue) SetSolved(v bool) {
	o.Solved = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *PatchedIssue) GetClientId() map[string]interface{} {
	if o == nil || IsNil(o.ClientId) {
		var ret map[string]interface{}
		return ret
	}
	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedIssue) GetClientIdOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ClientId) {
		return map[string]interface{}{}, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *PatchedIssue) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given map[string]interface{} and assigns it to the ClientId field.
func (o *PatchedIssue) SetClientId(v map[string]interface{}) {
	o.ClientId = v
}

// GetCommunityId returns the CommunityId field value if set, zero value otherwise.
func (o *PatchedIssue) GetCommunityId() map[string]interface{} {
	if o == nil || IsNil(o.CommunityId) {
		var ret map[string]interface{}
		return ret
	}
	return o.CommunityId
}

// GetCommunityIdOk returns a tuple with the CommunityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedIssue) GetCommunityIdOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CommunityId) {
		return map[string]interface{}{}, false
	}
	return o.CommunityId, true
}

// HasCommunityId returns a boolean if a field has been set.
func (o *PatchedIssue) HasCommunityId() bool {
	if o != nil && !IsNil(o.CommunityId) {
		return true
	}

	return false
}

// SetCommunityId gets a reference to the given map[string]interface{} and assigns it to the CommunityId field.
func (o *PatchedIssue) SetCommunityId(v map[string]interface{}) {
	o.CommunityId = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedIssue) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedIssue) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PatchedIssue) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given NullableString and assigns it to the CreatedAt field.
func (o *PatchedIssue) SetCreatedAt(v string) {
	o.CreatedAt.Set(&v)
}
// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *PatchedIssue) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *PatchedIssue) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedIssue) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedIssue) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *PatchedIssue) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *PatchedIssue) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *PatchedIssue) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *PatchedIssue) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *PatchedIssue) GetTags() []CommunityTag {
	if o == nil || IsNil(o.Tags) {
		var ret []CommunityTag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedIssue) GetTagsOk() ([]CommunityTag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *PatchedIssue) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []CommunityTag and assigns it to the Tags field.
func (o *PatchedIssue) SetTags(v []CommunityTag) {
	o.Tags = v
}

// GetNumComments returns the NumComments field value if set, zero value otherwise.
func (o *PatchedIssue) GetNumComments() int32 {
	if o == nil || IsNil(o.NumComments) {
		var ret int32
		return ret
	}
	return *o.NumComments
}

// GetNumCommentsOk returns a tuple with the NumComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedIssue) GetNumCommentsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumComments) {
		return nil, false
	}
	return o.NumComments, true
}

// HasNumComments returns a boolean if a field has been set.
func (o *PatchedIssue) HasNumComments() bool {
	if o != nil && !IsNil(o.NumComments) {
		return true
	}

	return false
}

// SetNumComments gets a reference to the given int32 and assigns it to the NumComments field.
func (o *PatchedIssue) SetNumComments(v int32) {
	o.NumComments = &v
}

// GetNumUniqueUsers returns the NumUniqueUsers field value if set, zero value otherwise.
func (o *PatchedIssue) GetNumUniqueUsers() int32 {
	if o == nil || IsNil(o.NumUniqueUsers) {
		var ret int32
		return ret
	}
	return *o.NumUniqueUsers
}

// GetNumUniqueUsersOk returns a tuple with the NumUniqueUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedIssue) GetNumUniqueUsersOk() (*int32, bool) {
	if o == nil || IsNil(o.NumUniqueUsers) {
		return nil, false
	}
	return o.NumUniqueUsers, true
}

// HasNumUniqueUsers returns a boolean if a field has been set.
func (o *PatchedIssue) HasNumUniqueUsers() bool {
	if o != nil && !IsNil(o.NumUniqueUsers) {
		return true
	}

	return false
}

// SetNumUniqueUsers gets a reference to the given int32 and assigns it to the NumUniqueUsers field.
func (o *PatchedIssue) SetNumUniqueUsers(v int32) {
	o.NumUniqueUsers = &v
}

// GetVisible returns the Visible field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedIssue) GetVisible() bool {
	if o == nil || IsNil(o.Visible.Get()) {
		var ret bool
		return ret
	}
	return *o.Visible.Get()
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedIssue) GetVisibleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Visible.Get(), o.Visible.IsSet()
}

// HasVisible returns a boolean if a field has been set.
func (o *PatchedIssue) HasVisible() bool {
	if o != nil && o.Visible.IsSet() {
		return true
	}

	return false
}

// SetVisible gets a reference to the given NullableBool and assigns it to the Visible field.
func (o *PatchedIssue) SetVisible(v bool) {
	o.Visible.Set(&v)
}
// SetVisibleNil sets the value for Visible to be an explicit nil
func (o *PatchedIssue) SetVisibleNil() {
	o.Visible.Set(nil)
}

// UnsetVisible ensures that no value is present for Visible, not even an explicit nil
func (o *PatchedIssue) UnsetVisible() {
	o.Visible.Unset()
}

func (o PatchedIssue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedIssue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IssueId) {
		toSerialize["issue_id"] = o.IssueId
	}
	if !IsNil(o.Issue) {
		toSerialize["issue"] = o.Issue
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Solved) {
		toSerialize["solved"] = o.Solved
	}
	if !IsNil(o.ClientId) {
		toSerialize["client_id"] = o.ClientId
	}
	if !IsNil(o.CommunityId) {
		toSerialize["community_id"] = o.CommunityId
	}
	if o.CreatedAt.IsSet() {
		toSerialize["created_at"] = o.CreatedAt.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.NumComments) {
		toSerialize["num_comments"] = o.NumComments
	}
	if !IsNil(o.NumUniqueUsers) {
		toSerialize["num_unique_users"] = o.NumUniqueUsers
	}
	if o.Visible.IsSet() {
		toSerialize["visible"] = o.Visible.Get()
	}
	return toSerialize, nil
}

type NullablePatchedIssue struct {
	value *PatchedIssue
	isSet bool
}

func (v NullablePatchedIssue) Get() *PatchedIssue {
	return v.value
}

func (v *NullablePatchedIssue) Set(val *PatchedIssue) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedIssue) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedIssue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedIssue(val *PatchedIssue) *NullablePatchedIssue {
	return &NullablePatchedIssue{value: val, isSet: true}
}

func (v NullablePatchedIssue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedIssue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


