/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CallMetrics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallMetrics{}

// CallMetrics struct for CallMetrics
type CallMetrics struct {
	// The call metrics id.
	CallMetricsId int32 `json:"call_metrics_id"`
	Call Call `json:"call"`
	Transcripts interface{} `json:"transcripts"`
	CallSatisfaction *bool `json:"call_satisfaction,omitempty"`
	IssueResolution *bool `json:"issue_resolution,omitempty"`
}

type _CallMetrics CallMetrics

// NewCallMetrics instantiates a new CallMetrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallMetrics(callMetricsId int32, call Call, transcripts interface{}) *CallMetrics {
	this := CallMetrics{}
	this.CallMetricsId = callMetricsId
	this.Call = call
	this.Transcripts = transcripts
	return &this
}

// NewCallMetricsWithDefaults instantiates a new CallMetrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallMetricsWithDefaults() *CallMetrics {
	this := CallMetrics{}
	return &this
}

// GetCallMetricsId returns the CallMetricsId field value
func (o *CallMetrics) GetCallMetricsId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CallMetricsId
}

// GetCallMetricsIdOk returns a tuple with the CallMetricsId field value
// and a boolean to check if the value has been set.
func (o *CallMetrics) GetCallMetricsIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallMetricsId, true
}

// SetCallMetricsId sets field value
func (o *CallMetrics) SetCallMetricsId(v int32) {
	o.CallMetricsId = v
}

// GetCall returns the Call field value
func (o *CallMetrics) GetCall() Call {
	if o == nil {
		var ret Call
		return ret
	}

	return o.Call
}

// GetCallOk returns a tuple with the Call field value
// and a boolean to check if the value has been set.
func (o *CallMetrics) GetCallOk() (*Call, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Call, true
}

// SetCall sets field value
func (o *CallMetrics) SetCall(v Call) {
	o.Call = v
}

// GetTranscripts returns the Transcripts field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CallMetrics) GetTranscripts() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Transcripts
}

// GetTranscriptsOk returns a tuple with the Transcripts field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallMetrics) GetTranscriptsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Transcripts) {
		return nil, false
	}
	return &o.Transcripts, true
}

// SetTranscripts sets field value
func (o *CallMetrics) SetTranscripts(v interface{}) {
	o.Transcripts = v
}

// GetCallSatisfaction returns the CallSatisfaction field value if set, zero value otherwise.
func (o *CallMetrics) GetCallSatisfaction() bool {
	if o == nil || IsNil(o.CallSatisfaction) {
		var ret bool
		return ret
	}
	return *o.CallSatisfaction
}

// GetCallSatisfactionOk returns a tuple with the CallSatisfaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallMetrics) GetCallSatisfactionOk() (*bool, bool) {
	if o == nil || IsNil(o.CallSatisfaction) {
		return nil, false
	}
	return o.CallSatisfaction, true
}

// HasCallSatisfaction returns a boolean if a field has been set.
func (o *CallMetrics) HasCallSatisfaction() bool {
	if o != nil && !IsNil(o.CallSatisfaction) {
		return true
	}

	return false
}

// SetCallSatisfaction gets a reference to the given bool and assigns it to the CallSatisfaction field.
func (o *CallMetrics) SetCallSatisfaction(v bool) {
	o.CallSatisfaction = &v
}

// GetIssueResolution returns the IssueResolution field value if set, zero value otherwise.
func (o *CallMetrics) GetIssueResolution() bool {
	if o == nil || IsNil(o.IssueResolution) {
		var ret bool
		return ret
	}
	return *o.IssueResolution
}

// GetIssueResolutionOk returns a tuple with the IssueResolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallMetrics) GetIssueResolutionOk() (*bool, bool) {
	if o == nil || IsNil(o.IssueResolution) {
		return nil, false
	}
	return o.IssueResolution, true
}

// HasIssueResolution returns a boolean if a field has been set.
func (o *CallMetrics) HasIssueResolution() bool {
	if o != nil && !IsNil(o.IssueResolution) {
		return true
	}

	return false
}

// SetIssueResolution gets a reference to the given bool and assigns it to the IssueResolution field.
func (o *CallMetrics) SetIssueResolution(v bool) {
	o.IssueResolution = &v
}

func (o CallMetrics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallMetrics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["call_metrics_id"] = o.CallMetricsId
	toSerialize["call"] = o.Call
	if o.Transcripts != nil {
		toSerialize["transcripts"] = o.Transcripts
	}
	if !IsNil(o.CallSatisfaction) {
		toSerialize["call_satisfaction"] = o.CallSatisfaction
	}
	if !IsNil(o.IssueResolution) {
		toSerialize["issue_resolution"] = o.IssueResolution
	}
	return toSerialize, nil
}

func (o *CallMetrics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"call_metrics_id",
		"call",
		"transcripts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCallMetrics := _CallMetrics{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCallMetrics)

	if err != nil {
		return err
	}

	*o = CallMetrics(varCallMetrics)

	return err
}

type NullableCallMetrics struct {
	value *CallMetrics
	isSet bool
}

func (v NullableCallMetrics) Get() *CallMetrics {
	return v.value
}

func (v *NullableCallMetrics) Set(val *CallMetrics) {
	v.value = val
	v.isSet = true
}

func (v NullableCallMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullableCallMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallMetrics(val *CallMetrics) *NullableCallMetrics {
	return &NullableCallMetrics{value: val, isSet: true}
}

func (v NullableCallMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


