/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Chat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Chat{}

// Chat struct for Chat
type Chat struct {
	// The chat ID UUID for an instance of a chat.
	ChatId int32 `json:"chat_id"`
	TenantId TenantInfo `json:"tenant_id"`
	GuestClient ClientInfo `json:"guest_client"`
	ChatOwner ClientInfo `json:"chat_owner"`
	AnonymousUser AnonymousUser `json:"anonymous_user"`
	// Whether client is satisfied or not
	ClientSatisfaction NullableBool `json:"client_satisfaction,omitempty"`
	// Enable or disable whether the virtual assistant should talk to a client
	IvaEnabled *bool `json:"iva_enabled,omitempty"`
	// The timestamp of the chat.
	Timestamp NullableTime `json:"timestamp"`
	CreatedAt NullableString `json:"created_at"`
}

type _Chat Chat

// NewChat instantiates a new Chat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChat(chatId int32, tenantId TenantInfo, guestClient ClientInfo, chatOwner ClientInfo, anonymousUser AnonymousUser, timestamp NullableTime, createdAt NullableString) *Chat {
	this := Chat{}
	this.ChatId = chatId
	this.TenantId = tenantId
	this.GuestClient = guestClient
	this.ChatOwner = chatOwner
	this.AnonymousUser = anonymousUser
	this.Timestamp = timestamp
	this.CreatedAt = createdAt
	return &this
}

// NewChatWithDefaults instantiates a new Chat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatWithDefaults() *Chat {
	this := Chat{}
	return &this
}

// GetChatId returns the ChatId field value
func (o *Chat) GetChatId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ChatId
}

// GetChatIdOk returns a tuple with the ChatId field value
// and a boolean to check if the value has been set.
func (o *Chat) GetChatIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChatId, true
}

// SetChatId sets field value
func (o *Chat) SetChatId(v int32) {
	o.ChatId = v
}

// GetTenantId returns the TenantId field value
func (o *Chat) GetTenantId() TenantInfo {
	if o == nil {
		var ret TenantInfo
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *Chat) GetTenantIdOk() (*TenantInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *Chat) SetTenantId(v TenantInfo) {
	o.TenantId = v
}

// GetGuestClient returns the GuestClient field value
func (o *Chat) GetGuestClient() ClientInfo {
	if o == nil {
		var ret ClientInfo
		return ret
	}

	return o.GuestClient
}

// GetGuestClientOk returns a tuple with the GuestClient field value
// and a boolean to check if the value has been set.
func (o *Chat) GetGuestClientOk() (*ClientInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GuestClient, true
}

// SetGuestClient sets field value
func (o *Chat) SetGuestClient(v ClientInfo) {
	o.GuestClient = v
}

// GetChatOwner returns the ChatOwner field value
func (o *Chat) GetChatOwner() ClientInfo {
	if o == nil {
		var ret ClientInfo
		return ret
	}

	return o.ChatOwner
}

// GetChatOwnerOk returns a tuple with the ChatOwner field value
// and a boolean to check if the value has been set.
func (o *Chat) GetChatOwnerOk() (*ClientInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChatOwner, true
}

// SetChatOwner sets field value
func (o *Chat) SetChatOwner(v ClientInfo) {
	o.ChatOwner = v
}

// GetAnonymousUser returns the AnonymousUser field value
func (o *Chat) GetAnonymousUser() AnonymousUser {
	if o == nil {
		var ret AnonymousUser
		return ret
	}

	return o.AnonymousUser
}

// GetAnonymousUserOk returns a tuple with the AnonymousUser field value
// and a boolean to check if the value has been set.
func (o *Chat) GetAnonymousUserOk() (*AnonymousUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AnonymousUser, true
}

// SetAnonymousUser sets field value
func (o *Chat) SetAnonymousUser(v AnonymousUser) {
	o.AnonymousUser = v
}

// GetClientSatisfaction returns the ClientSatisfaction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Chat) GetClientSatisfaction() bool {
	if o == nil || IsNil(o.ClientSatisfaction.Get()) {
		var ret bool
		return ret
	}
	return *o.ClientSatisfaction.Get()
}

// GetClientSatisfactionOk returns a tuple with the ClientSatisfaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Chat) GetClientSatisfactionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClientSatisfaction.Get(), o.ClientSatisfaction.IsSet()
}

// HasClientSatisfaction returns a boolean if a field has been set.
func (o *Chat) HasClientSatisfaction() bool {
	if o != nil && o.ClientSatisfaction.IsSet() {
		return true
	}

	return false
}

// SetClientSatisfaction gets a reference to the given NullableBool and assigns it to the ClientSatisfaction field.
func (o *Chat) SetClientSatisfaction(v bool) {
	o.ClientSatisfaction.Set(&v)
}
// SetClientSatisfactionNil sets the value for ClientSatisfaction to be an explicit nil
func (o *Chat) SetClientSatisfactionNil() {
	o.ClientSatisfaction.Set(nil)
}

// UnsetClientSatisfaction ensures that no value is present for ClientSatisfaction, not even an explicit nil
func (o *Chat) UnsetClientSatisfaction() {
	o.ClientSatisfaction.Unset()
}

// GetIvaEnabled returns the IvaEnabled field value if set, zero value otherwise.
func (o *Chat) GetIvaEnabled() bool {
	if o == nil || IsNil(o.IvaEnabled) {
		var ret bool
		return ret
	}
	return *o.IvaEnabled
}

// GetIvaEnabledOk returns a tuple with the IvaEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chat) GetIvaEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IvaEnabled) {
		return nil, false
	}
	return o.IvaEnabled, true
}

// HasIvaEnabled returns a boolean if a field has been set.
func (o *Chat) HasIvaEnabled() bool {
	if o != nil && !IsNil(o.IvaEnabled) {
		return true
	}

	return false
}

// SetIvaEnabled gets a reference to the given bool and assigns it to the IvaEnabled field.
func (o *Chat) SetIvaEnabled(v bool) {
	o.IvaEnabled = &v
}

// GetTimestamp returns the Timestamp field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Chat) GetTimestamp() time.Time {
	if o == nil || o.Timestamp.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Chat) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// SetTimestamp sets field value
func (o *Chat) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Chat) GetCreatedAt() string {
	if o == nil || o.CreatedAt.Get() == nil {
		var ret string
		return ret
	}

	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Chat) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// SetCreatedAt sets field value
func (o *Chat) SetCreatedAt(v string) {
	o.CreatedAt.Set(&v)
}

func (o Chat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Chat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chat_id"] = o.ChatId
	toSerialize["tenant_id"] = o.TenantId
	toSerialize["guest_client"] = o.GuestClient
	toSerialize["chat_owner"] = o.ChatOwner
	toSerialize["anonymous_user"] = o.AnonymousUser
	if o.ClientSatisfaction.IsSet() {
		toSerialize["client_satisfaction"] = o.ClientSatisfaction.Get()
	}
	if !IsNil(o.IvaEnabled) {
		toSerialize["iva_enabled"] = o.IvaEnabled
	}
	toSerialize["timestamp"] = o.Timestamp.Get()
	toSerialize["created_at"] = o.CreatedAt.Get()
	return toSerialize, nil
}

func (o *Chat) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chat_id",
		"tenant_id",
		"guest_client",
		"chat_owner",
		"anonymous_user",
		"timestamp",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChat := _Chat{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChat)

	if err != nil {
		return err
	}

	*o = Chat(varChat)

	return err
}

type NullableChat struct {
	value *Chat
	isSet bool
}

func (v NullableChat) Get() *Chat {
	return v.value
}

func (v *NullableChat) Set(val *Chat) {
	v.value = val
	v.isSet = true
}

func (v NullableChat) IsSet() bool {
	return v.isSet
}

func (v *NullableChat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChat(val *Chat) *NullableChat {
	return &NullableChat{value: val, isSet: true}
}

func (v NullableChat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


