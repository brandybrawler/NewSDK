/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Nested type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Nested{}

// Nested struct for Nested
type Nested struct {
	// The issue ID UUID .
	IssueId int32 `json:"issue_id"`
	// Metadata
	Metadata interface{} `json:"metadata,omitempty"`
	CreatedAt NullableString `json:"created_at"`
	DateTimeCreatedAt NullableString `json:"date_time_created_at"`
	// The timestamp of the chat.
	Timestamp NullableTime `json:"timestamp"`
	UpdatedAt NullableTime `json:"updated_at"`
	CommunityAiAssistant NullableString `json:"community_ai_assistant,omitempty"`
	// Display name of the issue that's created
	Issue string `json:"issue"`
	// Description of the issue
	Description string `json:"description"`
	// Was the issue solved or not
	Solved *bool `json:"solved,omitempty"`
	// Was the issue solved or not
	Visible NullableBool `json:"visible,omitempty"`
	// Display name of the client
	ClientId NullableInt32 `json:"client_id,omitempty"`
	// The webhookevent chats ID UUID.
	UnauthenticatedClient NullableInt32 `json:"unauthenticated_client,omitempty"`
	// Display name of the community
	CommunityId int32 `json:"community_id"`
	Tags []int32 `json:"tags,omitempty"`
}

type _Nested Nested

// NewNested instantiates a new Nested object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNested(issueId int32, createdAt NullableString, dateTimeCreatedAt NullableString, timestamp NullableTime, updatedAt NullableTime, issue string, description string, communityId int32) *Nested {
	this := Nested{}
	this.IssueId = issueId
	this.CreatedAt = createdAt
	this.DateTimeCreatedAt = dateTimeCreatedAt
	this.Timestamp = timestamp
	this.UpdatedAt = updatedAt
	this.Issue = issue
	this.Description = description
	this.CommunityId = communityId
	return &this
}

// NewNestedWithDefaults instantiates a new Nested object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNestedWithDefaults() *Nested {
	this := Nested{}
	return &this
}

// GetIssueId returns the IssueId field value
func (o *Nested) GetIssueId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IssueId
}

// GetIssueIdOk returns a tuple with the IssueId field value
// and a boolean to check if the value has been set.
func (o *Nested) GetIssueIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssueId, true
}

// SetIssueId sets field value
func (o *Nested) SetIssueId(v int32) {
	o.IssueId = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Nested) GetMetadata() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Nested) GetMetadataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return &o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Nested) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given interface{} and assigns it to the Metadata field.
func (o *Nested) SetMetadata(v interface{}) {
	o.Metadata = v
}

// GetCreatedAt returns the CreatedAt field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Nested) GetCreatedAt() string {
	if o == nil || o.CreatedAt.Get() == nil {
		var ret string
		return ret
	}

	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Nested) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// SetCreatedAt sets field value
func (o *Nested) SetCreatedAt(v string) {
	o.CreatedAt.Set(&v)
}

// GetDateTimeCreatedAt returns the DateTimeCreatedAt field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Nested) GetDateTimeCreatedAt() string {
	if o == nil || o.DateTimeCreatedAt.Get() == nil {
		var ret string
		return ret
	}

	return *o.DateTimeCreatedAt.Get()
}

// GetDateTimeCreatedAtOk returns a tuple with the DateTimeCreatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Nested) GetDateTimeCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateTimeCreatedAt.Get(), o.DateTimeCreatedAt.IsSet()
}

// SetDateTimeCreatedAt sets field value
func (o *Nested) SetDateTimeCreatedAt(v string) {
	o.DateTimeCreatedAt.Set(&v)
}

// GetTimestamp returns the Timestamp field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Nested) GetTimestamp() time.Time {
	if o == nil || o.Timestamp.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Nested) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// SetTimestamp sets field value
func (o *Nested) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}

// GetUpdatedAt returns the UpdatedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Nested) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Nested) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// SetUpdatedAt sets field value
func (o *Nested) SetUpdatedAt(v time.Time) {
	o.UpdatedAt.Set(&v)
}

// GetCommunityAiAssistant returns the CommunityAiAssistant field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Nested) GetCommunityAiAssistant() string {
	if o == nil || IsNil(o.CommunityAiAssistant.Get()) {
		var ret string
		return ret
	}
	return *o.CommunityAiAssistant.Get()
}

// GetCommunityAiAssistantOk returns a tuple with the CommunityAiAssistant field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Nested) GetCommunityAiAssistantOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommunityAiAssistant.Get(), o.CommunityAiAssistant.IsSet()
}

// HasCommunityAiAssistant returns a boolean if a field has been set.
func (o *Nested) HasCommunityAiAssistant() bool {
	if o != nil && o.CommunityAiAssistant.IsSet() {
		return true
	}

	return false
}

// SetCommunityAiAssistant gets a reference to the given NullableString and assigns it to the CommunityAiAssistant field.
func (o *Nested) SetCommunityAiAssistant(v string) {
	o.CommunityAiAssistant.Set(&v)
}
// SetCommunityAiAssistantNil sets the value for CommunityAiAssistant to be an explicit nil
func (o *Nested) SetCommunityAiAssistantNil() {
	o.CommunityAiAssistant.Set(nil)
}

// UnsetCommunityAiAssistant ensures that no value is present for CommunityAiAssistant, not even an explicit nil
func (o *Nested) UnsetCommunityAiAssistant() {
	o.CommunityAiAssistant.Unset()
}

// GetIssue returns the Issue field value
func (o *Nested) GetIssue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Issue
}

// GetIssueOk returns a tuple with the Issue field value
// and a boolean to check if the value has been set.
func (o *Nested) GetIssueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issue, true
}

// SetIssue sets field value
func (o *Nested) SetIssue(v string) {
	o.Issue = v
}

// GetDescription returns the Description field value
func (o *Nested) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Nested) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Nested) SetDescription(v string) {
	o.Description = v
}

// GetSolved returns the Solved field value if set, zero value otherwise.
func (o *Nested) GetSolved() bool {
	if o == nil || IsNil(o.Solved) {
		var ret bool
		return ret
	}
	return *o.Solved
}

// GetSolvedOk returns a tuple with the Solved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nested) GetSolvedOk() (*bool, bool) {
	if o == nil || IsNil(o.Solved) {
		return nil, false
	}
	return o.Solved, true
}

// HasSolved returns a boolean if a field has been set.
func (o *Nested) HasSolved() bool {
	if o != nil && !IsNil(o.Solved) {
		return true
	}

	return false
}

// SetSolved gets a reference to the given bool and assigns it to the Solved field.
func (o *Nested) SetSolved(v bool) {
	o.Solved = &v
}

// GetVisible returns the Visible field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Nested) GetVisible() bool {
	if o == nil || IsNil(o.Visible.Get()) {
		var ret bool
		return ret
	}
	return *o.Visible.Get()
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Nested) GetVisibleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Visible.Get(), o.Visible.IsSet()
}

// HasVisible returns a boolean if a field has been set.
func (o *Nested) HasVisible() bool {
	if o != nil && o.Visible.IsSet() {
		return true
	}

	return false
}

// SetVisible gets a reference to the given NullableBool and assigns it to the Visible field.
func (o *Nested) SetVisible(v bool) {
	o.Visible.Set(&v)
}
// SetVisibleNil sets the value for Visible to be an explicit nil
func (o *Nested) SetVisibleNil() {
	o.Visible.Set(nil)
}

// UnsetVisible ensures that no value is present for Visible, not even an explicit nil
func (o *Nested) UnsetVisible() {
	o.Visible.Unset()
}

// GetClientId returns the ClientId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Nested) GetClientId() int32 {
	if o == nil || IsNil(o.ClientId.Get()) {
		var ret int32
		return ret
	}
	return *o.ClientId.Get()
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Nested) GetClientIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClientId.Get(), o.ClientId.IsSet()
}

// HasClientId returns a boolean if a field has been set.
func (o *Nested) HasClientId() bool {
	if o != nil && o.ClientId.IsSet() {
		return true
	}

	return false
}

// SetClientId gets a reference to the given NullableInt32 and assigns it to the ClientId field.
func (o *Nested) SetClientId(v int32) {
	o.ClientId.Set(&v)
}
// SetClientIdNil sets the value for ClientId to be an explicit nil
func (o *Nested) SetClientIdNil() {
	o.ClientId.Set(nil)
}

// UnsetClientId ensures that no value is present for ClientId, not even an explicit nil
func (o *Nested) UnsetClientId() {
	o.ClientId.Unset()
}

// GetUnauthenticatedClient returns the UnauthenticatedClient field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Nested) GetUnauthenticatedClient() int32 {
	if o == nil || IsNil(o.UnauthenticatedClient.Get()) {
		var ret int32
		return ret
	}
	return *o.UnauthenticatedClient.Get()
}

// GetUnauthenticatedClientOk returns a tuple with the UnauthenticatedClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Nested) GetUnauthenticatedClientOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnauthenticatedClient.Get(), o.UnauthenticatedClient.IsSet()
}

// HasUnauthenticatedClient returns a boolean if a field has been set.
func (o *Nested) HasUnauthenticatedClient() bool {
	if o != nil && o.UnauthenticatedClient.IsSet() {
		return true
	}

	return false
}

// SetUnauthenticatedClient gets a reference to the given NullableInt32 and assigns it to the UnauthenticatedClient field.
func (o *Nested) SetUnauthenticatedClient(v int32) {
	o.UnauthenticatedClient.Set(&v)
}
// SetUnauthenticatedClientNil sets the value for UnauthenticatedClient to be an explicit nil
func (o *Nested) SetUnauthenticatedClientNil() {
	o.UnauthenticatedClient.Set(nil)
}

// UnsetUnauthenticatedClient ensures that no value is present for UnauthenticatedClient, not even an explicit nil
func (o *Nested) UnsetUnauthenticatedClient() {
	o.UnauthenticatedClient.Unset()
}

// GetCommunityId returns the CommunityId field value
func (o *Nested) GetCommunityId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CommunityId
}

// GetCommunityIdOk returns a tuple with the CommunityId field value
// and a boolean to check if the value has been set.
func (o *Nested) GetCommunityIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommunityId, true
}

// SetCommunityId sets field value
func (o *Nested) SetCommunityId(v int32) {
	o.CommunityId = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Nested) GetTags() []int32 {
	if o == nil || IsNil(o.Tags) {
		var ret []int32
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nested) GetTagsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Nested) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []int32 and assigns it to the Tags field.
func (o *Nested) SetTags(v []int32) {
	o.Tags = v
}

func (o Nested) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Nested) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["issue_id"] = o.IssueId
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["created_at"] = o.CreatedAt.Get()
	toSerialize["date_time_created_at"] = o.DateTimeCreatedAt.Get()
	toSerialize["timestamp"] = o.Timestamp.Get()
	toSerialize["updated_at"] = o.UpdatedAt.Get()
	if o.CommunityAiAssistant.IsSet() {
		toSerialize["community_ai_assistant"] = o.CommunityAiAssistant.Get()
	}
	toSerialize["issue"] = o.Issue
	toSerialize["description"] = o.Description
	if !IsNil(o.Solved) {
		toSerialize["solved"] = o.Solved
	}
	if o.Visible.IsSet() {
		toSerialize["visible"] = o.Visible.Get()
	}
	if o.ClientId.IsSet() {
		toSerialize["client_id"] = o.ClientId.Get()
	}
	if o.UnauthenticatedClient.IsSet() {
		toSerialize["unauthenticated_client"] = o.UnauthenticatedClient.Get()
	}
	toSerialize["community_id"] = o.CommunityId
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *Nested) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"issue_id",
		"created_at",
		"date_time_created_at",
		"timestamp",
		"updated_at",
		"issue",
		"description",
		"community_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNested := _Nested{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNested)

	if err != nil {
		return err
	}

	*o = Nested(varNested)

	return err
}

type NullableNested struct {
	value *Nested
	isSet bool
}

func (v NullableNested) Get() *Nested {
	return v.value
}

func (v *NullableNested) Set(val *Nested) {
	v.value = val
	v.isSet = true
}

func (v NullableNested) IsSet() bool {
	return v.isSet
}

func (v *NullableNested) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNested(val *Nested) *NullableNested {
	return &NullableNested{value: val, isSet: true}
}

func (v NullableNested) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNested) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


