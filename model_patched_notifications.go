/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PatchedNotifications type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedNotifications{}

// PatchedNotifications struct for PatchedNotifications
type PatchedNotifications struct {
	// The notifications for an instance of a chat.
	NotificationsId *int32 `json:"notifications_id,omitempty"`
	Employee NullableInt32 `json:"employee,omitempty"`
	Admin NullableInt32 `json:"admin,omitempty"`
	Client NullableInt32 `json:"client,omitempty"`
	// The webhookevent chats ID UUID.
	GuestUser NullableInt32 `json:"guest_user,omitempty"`
	Delegation *Delegation `json:"delegation,omitempty"`
	// Message content of the notification
	NotificationMessage NullableString `json:"notification_message,omitempty"`
	// Whether the notification has been read or not
	Read *bool `json:"read,omitempty"`
	// The timestamp of the chat.
	Timestamp NullableTime `json:"timestamp,omitempty"`
}

// NewPatchedNotifications instantiates a new PatchedNotifications object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedNotifications() *PatchedNotifications {
	this := PatchedNotifications{}
	return &this
}

// NewPatchedNotificationsWithDefaults instantiates a new PatchedNotifications object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedNotificationsWithDefaults() *PatchedNotifications {
	this := PatchedNotifications{}
	return &this
}

// GetNotificationsId returns the NotificationsId field value if set, zero value otherwise.
func (o *PatchedNotifications) GetNotificationsId() int32 {
	if o == nil || IsNil(o.NotificationsId) {
		var ret int32
		return ret
	}
	return *o.NotificationsId
}

// GetNotificationsIdOk returns a tuple with the NotificationsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNotifications) GetNotificationsIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NotificationsId) {
		return nil, false
	}
	return o.NotificationsId, true
}

// HasNotificationsId returns a boolean if a field has been set.
func (o *PatchedNotifications) HasNotificationsId() bool {
	if o != nil && !IsNil(o.NotificationsId) {
		return true
	}

	return false
}

// SetNotificationsId gets a reference to the given int32 and assigns it to the NotificationsId field.
func (o *PatchedNotifications) SetNotificationsId(v int32) {
	o.NotificationsId = &v
}

// GetEmployee returns the Employee field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedNotifications) GetEmployee() int32 {
	if o == nil || IsNil(o.Employee.Get()) {
		var ret int32
		return ret
	}
	return *o.Employee.Get()
}

// GetEmployeeOk returns a tuple with the Employee field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedNotifications) GetEmployeeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Employee.Get(), o.Employee.IsSet()
}

// HasEmployee returns a boolean if a field has been set.
func (o *PatchedNotifications) HasEmployee() bool {
	if o != nil && o.Employee.IsSet() {
		return true
	}

	return false
}

// SetEmployee gets a reference to the given NullableInt32 and assigns it to the Employee field.
func (o *PatchedNotifications) SetEmployee(v int32) {
	o.Employee.Set(&v)
}
// SetEmployeeNil sets the value for Employee to be an explicit nil
func (o *PatchedNotifications) SetEmployeeNil() {
	o.Employee.Set(nil)
}

// UnsetEmployee ensures that no value is present for Employee, not even an explicit nil
func (o *PatchedNotifications) UnsetEmployee() {
	o.Employee.Unset()
}

// GetAdmin returns the Admin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedNotifications) GetAdmin() int32 {
	if o == nil || IsNil(o.Admin.Get()) {
		var ret int32
		return ret
	}
	return *o.Admin.Get()
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedNotifications) GetAdminOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Admin.Get(), o.Admin.IsSet()
}

// HasAdmin returns a boolean if a field has been set.
func (o *PatchedNotifications) HasAdmin() bool {
	if o != nil && o.Admin.IsSet() {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given NullableInt32 and assigns it to the Admin field.
func (o *PatchedNotifications) SetAdmin(v int32) {
	o.Admin.Set(&v)
}
// SetAdminNil sets the value for Admin to be an explicit nil
func (o *PatchedNotifications) SetAdminNil() {
	o.Admin.Set(nil)
}

// UnsetAdmin ensures that no value is present for Admin, not even an explicit nil
func (o *PatchedNotifications) UnsetAdmin() {
	o.Admin.Unset()
}

// GetClient returns the Client field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedNotifications) GetClient() int32 {
	if o == nil || IsNil(o.Client.Get()) {
		var ret int32
		return ret
	}
	return *o.Client.Get()
}

// GetClientOk returns a tuple with the Client field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedNotifications) GetClientOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Client.Get(), o.Client.IsSet()
}

// HasClient returns a boolean if a field has been set.
func (o *PatchedNotifications) HasClient() bool {
	if o != nil && o.Client.IsSet() {
		return true
	}

	return false
}

// SetClient gets a reference to the given NullableInt32 and assigns it to the Client field.
func (o *PatchedNotifications) SetClient(v int32) {
	o.Client.Set(&v)
}
// SetClientNil sets the value for Client to be an explicit nil
func (o *PatchedNotifications) SetClientNil() {
	o.Client.Set(nil)
}

// UnsetClient ensures that no value is present for Client, not even an explicit nil
func (o *PatchedNotifications) UnsetClient() {
	o.Client.Unset()
}

// GetGuestUser returns the GuestUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedNotifications) GetGuestUser() int32 {
	if o == nil || IsNil(o.GuestUser.Get()) {
		var ret int32
		return ret
	}
	return *o.GuestUser.Get()
}

// GetGuestUserOk returns a tuple with the GuestUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedNotifications) GetGuestUserOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.GuestUser.Get(), o.GuestUser.IsSet()
}

// HasGuestUser returns a boolean if a field has been set.
func (o *PatchedNotifications) HasGuestUser() bool {
	if o != nil && o.GuestUser.IsSet() {
		return true
	}

	return false
}

// SetGuestUser gets a reference to the given NullableInt32 and assigns it to the GuestUser field.
func (o *PatchedNotifications) SetGuestUser(v int32) {
	o.GuestUser.Set(&v)
}
// SetGuestUserNil sets the value for GuestUser to be an explicit nil
func (o *PatchedNotifications) SetGuestUserNil() {
	o.GuestUser.Set(nil)
}

// UnsetGuestUser ensures that no value is present for GuestUser, not even an explicit nil
func (o *PatchedNotifications) UnsetGuestUser() {
	o.GuestUser.Unset()
}

// GetDelegation returns the Delegation field value if set, zero value otherwise.
func (o *PatchedNotifications) GetDelegation() Delegation {
	if o == nil || IsNil(o.Delegation) {
		var ret Delegation
		return ret
	}
	return *o.Delegation
}

// GetDelegationOk returns a tuple with the Delegation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNotifications) GetDelegationOk() (*Delegation, bool) {
	if o == nil || IsNil(o.Delegation) {
		return nil, false
	}
	return o.Delegation, true
}

// HasDelegation returns a boolean if a field has been set.
func (o *PatchedNotifications) HasDelegation() bool {
	if o != nil && !IsNil(o.Delegation) {
		return true
	}

	return false
}

// SetDelegation gets a reference to the given Delegation and assigns it to the Delegation field.
func (o *PatchedNotifications) SetDelegation(v Delegation) {
	o.Delegation = &v
}

// GetNotificationMessage returns the NotificationMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedNotifications) GetNotificationMessage() string {
	if o == nil || IsNil(o.NotificationMessage.Get()) {
		var ret string
		return ret
	}
	return *o.NotificationMessage.Get()
}

// GetNotificationMessageOk returns a tuple with the NotificationMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedNotifications) GetNotificationMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NotificationMessage.Get(), o.NotificationMessage.IsSet()
}

// HasNotificationMessage returns a boolean if a field has been set.
func (o *PatchedNotifications) HasNotificationMessage() bool {
	if o != nil && o.NotificationMessage.IsSet() {
		return true
	}

	return false
}

// SetNotificationMessage gets a reference to the given NullableString and assigns it to the NotificationMessage field.
func (o *PatchedNotifications) SetNotificationMessage(v string) {
	o.NotificationMessage.Set(&v)
}
// SetNotificationMessageNil sets the value for NotificationMessage to be an explicit nil
func (o *PatchedNotifications) SetNotificationMessageNil() {
	o.NotificationMessage.Set(nil)
}

// UnsetNotificationMessage ensures that no value is present for NotificationMessage, not even an explicit nil
func (o *PatchedNotifications) UnsetNotificationMessage() {
	o.NotificationMessage.Unset()
}

// GetRead returns the Read field value if set, zero value otherwise.
func (o *PatchedNotifications) GetRead() bool {
	if o == nil || IsNil(o.Read) {
		var ret bool
		return ret
	}
	return *o.Read
}

// GetReadOk returns a tuple with the Read field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNotifications) GetReadOk() (*bool, bool) {
	if o == nil || IsNil(o.Read) {
		return nil, false
	}
	return o.Read, true
}

// HasRead returns a boolean if a field has been set.
func (o *PatchedNotifications) HasRead() bool {
	if o != nil && !IsNil(o.Read) {
		return true
	}

	return false
}

// SetRead gets a reference to the given bool and assigns it to the Read field.
func (o *PatchedNotifications) SetRead(v bool) {
	o.Read = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedNotifications) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedNotifications) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *PatchedNotifications) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *PatchedNotifications) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *PatchedNotifications) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *PatchedNotifications) UnsetTimestamp() {
	o.Timestamp.Unset()
}

func (o PatchedNotifications) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedNotifications) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NotificationsId) {
		toSerialize["notifications_id"] = o.NotificationsId
	}
	if o.Employee.IsSet() {
		toSerialize["employee"] = o.Employee.Get()
	}
	if o.Admin.IsSet() {
		toSerialize["admin"] = o.Admin.Get()
	}
	if o.Client.IsSet() {
		toSerialize["client"] = o.Client.Get()
	}
	if o.GuestUser.IsSet() {
		toSerialize["guest_user"] = o.GuestUser.Get()
	}
	if !IsNil(o.Delegation) {
		toSerialize["delegation"] = o.Delegation
	}
	if o.NotificationMessage.IsSet() {
		toSerialize["notification_message"] = o.NotificationMessage.Get()
	}
	if !IsNil(o.Read) {
		toSerialize["read"] = o.Read
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	return toSerialize, nil
}

type NullablePatchedNotifications struct {
	value *PatchedNotifications
	isSet bool
}

func (v NullablePatchedNotifications) Get() *PatchedNotifications {
	return v.value
}

func (v *NullablePatchedNotifications) Set(val *PatchedNotifications) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedNotifications) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedNotifications) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedNotifications(val *PatchedNotifications) *NullablePatchedNotifications {
	return &NullablePatchedNotifications{value: val, isSet: true}
}

func (v NullablePatchedNotifications) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedNotifications) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


