/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Message type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Message{}

// Message struct for Message
type Message struct {
	// The message ID UUID for an instance of a chat.
	MessageId int32 `json:"message_id"`
	// The chat ID UUID for an instance of a chat.
	ChatId int32 `json:"chat_id"`
	// Message text content
	TextContent NullableString `json:"text_content,omitempty"`
	// The voice note sent
	VoiceContent NullableString `json:"voice_content,omitempty"`
	// Either the message is sent by the agent or by the tenant  * `client` - client * `tenant` - tenant * `tenant_iva` - tenant_iva * `anonymous_client` - anonymous_client
	MessageSender MessageSenderEnum `json:"message_sender"`
	// Say whether a client escalated a chat to a human agent.
	Escalated NullableBool `json:"escalated,omitempty"`
	Channel NullableChannelEnum `json:"channel,omitempty"`
	Topic NullableTopicEnum `json:"topic,omitempty"`
}

type _Message Message

// NewMessage instantiates a new Message object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessage(messageId int32, chatId int32, messageSender MessageSenderEnum) *Message {
	this := Message{}
	this.MessageId = messageId
	this.ChatId = chatId
	this.MessageSender = messageSender
	return &this
}

// NewMessageWithDefaults instantiates a new Message object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageWithDefaults() *Message {
	this := Message{}
	return &this
}

// GetMessageId returns the MessageId field value
func (o *Message) GetMessageId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value
// and a boolean to check if the value has been set.
func (o *Message) GetMessageIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageId, true
}

// SetMessageId sets field value
func (o *Message) SetMessageId(v int32) {
	o.MessageId = v
}

// GetChatId returns the ChatId field value
func (o *Message) GetChatId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ChatId
}

// GetChatIdOk returns a tuple with the ChatId field value
// and a boolean to check if the value has been set.
func (o *Message) GetChatIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChatId, true
}

// SetChatId sets field value
func (o *Message) SetChatId(v int32) {
	o.ChatId = v
}

// GetTextContent returns the TextContent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Message) GetTextContent() string {
	if o == nil || IsNil(o.TextContent.Get()) {
		var ret string
		return ret
	}
	return *o.TextContent.Get()
}

// GetTextContentOk returns a tuple with the TextContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Message) GetTextContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TextContent.Get(), o.TextContent.IsSet()
}

// HasTextContent returns a boolean if a field has been set.
func (o *Message) HasTextContent() bool {
	if o != nil && o.TextContent.IsSet() {
		return true
	}

	return false
}

// SetTextContent gets a reference to the given NullableString and assigns it to the TextContent field.
func (o *Message) SetTextContent(v string) {
	o.TextContent.Set(&v)
}
// SetTextContentNil sets the value for TextContent to be an explicit nil
func (o *Message) SetTextContentNil() {
	o.TextContent.Set(nil)
}

// UnsetTextContent ensures that no value is present for TextContent, not even an explicit nil
func (o *Message) UnsetTextContent() {
	o.TextContent.Unset()
}

// GetVoiceContent returns the VoiceContent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Message) GetVoiceContent() string {
	if o == nil || IsNil(o.VoiceContent.Get()) {
		var ret string
		return ret
	}
	return *o.VoiceContent.Get()
}

// GetVoiceContentOk returns a tuple with the VoiceContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Message) GetVoiceContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VoiceContent.Get(), o.VoiceContent.IsSet()
}

// HasVoiceContent returns a boolean if a field has been set.
func (o *Message) HasVoiceContent() bool {
	if o != nil && o.VoiceContent.IsSet() {
		return true
	}

	return false
}

// SetVoiceContent gets a reference to the given NullableString and assigns it to the VoiceContent field.
func (o *Message) SetVoiceContent(v string) {
	o.VoiceContent.Set(&v)
}
// SetVoiceContentNil sets the value for VoiceContent to be an explicit nil
func (o *Message) SetVoiceContentNil() {
	o.VoiceContent.Set(nil)
}

// UnsetVoiceContent ensures that no value is present for VoiceContent, not even an explicit nil
func (o *Message) UnsetVoiceContent() {
	o.VoiceContent.Unset()
}

// GetMessageSender returns the MessageSender field value
func (o *Message) GetMessageSender() MessageSenderEnum {
	if o == nil {
		var ret MessageSenderEnum
		return ret
	}

	return o.MessageSender
}

// GetMessageSenderOk returns a tuple with the MessageSender field value
// and a boolean to check if the value has been set.
func (o *Message) GetMessageSenderOk() (*MessageSenderEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageSender, true
}

// SetMessageSender sets field value
func (o *Message) SetMessageSender(v MessageSenderEnum) {
	o.MessageSender = v
}

// GetEscalated returns the Escalated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Message) GetEscalated() bool {
	if o == nil || IsNil(o.Escalated.Get()) {
		var ret bool
		return ret
	}
	return *o.Escalated.Get()
}

// GetEscalatedOk returns a tuple with the Escalated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Message) GetEscalatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Escalated.Get(), o.Escalated.IsSet()
}

// HasEscalated returns a boolean if a field has been set.
func (o *Message) HasEscalated() bool {
	if o != nil && o.Escalated.IsSet() {
		return true
	}

	return false
}

// SetEscalated gets a reference to the given NullableBool and assigns it to the Escalated field.
func (o *Message) SetEscalated(v bool) {
	o.Escalated.Set(&v)
}
// SetEscalatedNil sets the value for Escalated to be an explicit nil
func (o *Message) SetEscalatedNil() {
	o.Escalated.Set(nil)
}

// UnsetEscalated ensures that no value is present for Escalated, not even an explicit nil
func (o *Message) UnsetEscalated() {
	o.Escalated.Unset()
}

// GetChannel returns the Channel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Message) GetChannel() ChannelEnum {
	if o == nil || IsNil(o.Channel.Get()) {
		var ret ChannelEnum
		return ret
	}
	return *o.Channel.Get()
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Message) GetChannelOk() (*ChannelEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.Channel.Get(), o.Channel.IsSet()
}

// HasChannel returns a boolean if a field has been set.
func (o *Message) HasChannel() bool {
	if o != nil && o.Channel.IsSet() {
		return true
	}

	return false
}

// SetChannel gets a reference to the given NullableChannelEnum and assigns it to the Channel field.
func (o *Message) SetChannel(v ChannelEnum) {
	o.Channel.Set(&v)
}
// SetChannelNil sets the value for Channel to be an explicit nil
func (o *Message) SetChannelNil() {
	o.Channel.Set(nil)
}

// UnsetChannel ensures that no value is present for Channel, not even an explicit nil
func (o *Message) UnsetChannel() {
	o.Channel.Unset()
}

// GetTopic returns the Topic field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Message) GetTopic() TopicEnum {
	if o == nil || IsNil(o.Topic.Get()) {
		var ret TopicEnum
		return ret
	}
	return *o.Topic.Get()
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Message) GetTopicOk() (*TopicEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.Topic.Get(), o.Topic.IsSet()
}

// HasTopic returns a boolean if a field has been set.
func (o *Message) HasTopic() bool {
	if o != nil && o.Topic.IsSet() {
		return true
	}

	return false
}

// SetTopic gets a reference to the given NullableTopicEnum and assigns it to the Topic field.
func (o *Message) SetTopic(v TopicEnum) {
	o.Topic.Set(&v)
}
// SetTopicNil sets the value for Topic to be an explicit nil
func (o *Message) SetTopicNil() {
	o.Topic.Set(nil)
}

// UnsetTopic ensures that no value is present for Topic, not even an explicit nil
func (o *Message) UnsetTopic() {
	o.Topic.Unset()
}

func (o Message) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Message) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message_id"] = o.MessageId
	toSerialize["chat_id"] = o.ChatId
	if o.TextContent.IsSet() {
		toSerialize["text_content"] = o.TextContent.Get()
	}
	if o.VoiceContent.IsSet() {
		toSerialize["voice_content"] = o.VoiceContent.Get()
	}
	toSerialize["message_sender"] = o.MessageSender
	if o.Escalated.IsSet() {
		toSerialize["escalated"] = o.Escalated.Get()
	}
	if o.Channel.IsSet() {
		toSerialize["channel"] = o.Channel.Get()
	}
	if o.Topic.IsSet() {
		toSerialize["topic"] = o.Topic.Get()
	}
	return toSerialize, nil
}

func (o *Message) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message_id",
		"chat_id",
		"message_sender",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessage := _Message{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessage)

	if err != nil {
		return err
	}

	*o = Message(varMessage)

	return err
}

type NullableMessage struct {
	value *Message
	isSet bool
}

func (v NullableMessage) Get() *Message {
	return v.value
}

func (v *NullableMessage) Set(val *Message) {
	v.value = val
	v.isSet = true
}

func (v NullableMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessage(val *Message) *NullableMessage {
	return &NullableMessage{value: val, isSet: true}
}

func (v NullableMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


